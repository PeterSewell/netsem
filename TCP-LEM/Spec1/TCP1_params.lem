(*
(* A HOL98 specification of TCP *)

(* Host behavioural parameters *)

(*[ RCSID "$Id: TCP1_paramsScript.sml,v 1.30 2009/02/17 11:56:46 tjr22 Exp $" ]*)

(* standard prefix *)
open HolKernel boolLib Parse
infix THEN THENC |-> ##

open bossLib

open HolDoc

local open TCP1_baseTypesTheory
           TCP1_utilsTheory
           (* TCP1_hostTypesTheory *)
	   TCP1_timersTheory
	   TCP1_netTypesTheory
in end;

val Term = Parse.Term;

val _ = new_theory "TCP1_params";

val _ = Version.registerTheory "$RCSfile: TCP1_paramsScript.sml,v $" "$Revision: 1.30 $" "$Date: 2009/02/17 11:56:46 $";
*)

open TCP1_lemSupport
open TCP1_utils
open TCP1_baseTypes
open TCP1_timers


(*: @chapter [[TCP1_params]] Host behavioural parameters

This file defines a large number of constants affecting the behaviour
of the host.  Many of these of are adjustable by sysctls/registry keys on
the target architectures.

:*)


(* TODO: ultimately, these should probably all be host parameters, so
   we can tweak them without rebuilding the wHOLe spec... *)

(* KSW/MN: perhaps try underspecifying some of these constants, using the following: *)

(* new_specification { consts = [{const_name = "SOMAXCONN", fixity = Prefix}],
                       name = "SOMAXCONN_def",
                       sat_thm = |- ?x. x > 64 }
     returns a definition of the form |- SOMAXCONN > 64 *)


(* ------------------------------------------------------------------ *)
(*:
@section [[params_basic_types]] ALL Basic types

These types used to be in hostTypes. They should probably be moved to baseTypes.

:*)

(* REMARK move to baseTypes *)

(* -------------------------------------------------- *)
(*                       FILES                        *)
(* -------------------------------------------------- *)

(*: @section [[hostty_files]] ALL Files

TODO3
:*)

type (*: file ID :*) fid = FID of num(*:@mergewithnext:*)

type (* socket ID *) sid = SID of num(*:
@description
File IDs [[fid]] and socket IDs [[sid]] are really unique, unlike file
descriptors [[fd]].

:*)


type (*: type of file, with pointer to details structure :*)
   filetype = FT_Console            | FT_Socket of sid(*:@mergewithnext:*)

type (*: flags set on a file :*)
   fileflags = <| b : filebflag -> bool     |>
(*:@mergewithnext:*)

type (*: open file description  :*)
   file  = <| ft  : filetype;  ff  : fileflags  |>
(*:@mergewithnext:*)

let (*: helper constructor :*)
  File(ft,ff) = <| ft=ft; ff=ff |>
(*:
@description
A file is represented by an "open file description" (in POSIX
terminology).  This contains file flags and a file type; the specification only covers [[FT_Console]] and [[FT_Socket]] files.  For most
file types, it also contains a pointer to another structure containing
data specific to that file type -- in our case, a [[sid]] pointing to
a [[socket]] structure for files of type [[FT_Socket]].
%
The file flags are defined in TCP1\_baseTypes: see {@link
[[filebflag]]}.

:*)


(* sockflag types are defined in TCP1_baseTypes *)
type (*: flags set on a socket :*)
   sockflags = <| b1 : sockbflag -> bool;
                  n : socknflag -> num;
                  t : socktflag -> time
               |>
 (* removed @mergewithnext *)

type (*: the architectures we consider :*)
  arch = Linux_2_4_20_8
       | WinXP_Prof_SP1
       | FreeBSD_4_6_RELEASE
(*:
@description
%
The behaviour of TCP/IP stacks varies between architectures.  Here we
list the architectures we consider.

In fact our FreeBSD build also has the |TCP_DEBUG| option turned on,
and another edit to improve the accuracy of kernel time (for our
automated testing).  We believe that these do not impact the TCP
semantics in any way.

:*)

(*
Speculation: POSIX should perhaps be an architecture, one that yields
a very underspecified response.
*)


(* REMARK end of stuff imported from hostTypes *)

(* ------------------------------------------------------------------ *)
(*:
@section [[params_model]] ALL Model parameters

Booleans that select a particular model semantics.

:*)
(* ------------------------------------------------------------------ *)

let 
  INFINITE_RESOURCES = true
(*:
@description

[[INFINITE_RESOURCES]] forbids various resource
failures, e.g.~lack of kernel memory.  These failures are
nondeterministic in the specification (to be more precise the
specification would have to model far more detail about the real
system) and rare in practice, so for testing and reasoning one often
wants to exclude them altogether.

:*)

let 
  BSD_RTTVAR_BUG = true

(*:
@description
 [[BSD_RTTVAR_BUG]] enables a peculiarity of BSD behaviour for retransmit timeouts.
%
     After [[TCP_MAXRXTSHIFT / 4]] retransmit timeouts, [[t_srtt]] and
     [[t_rttvar]] are invalidated, but should still be used to compute
     future retransmit timeouts until better information becomes
     available.  BSD makes a mistake in doing this, thus causing
     future retransmit timeouts to be wrong.

     The code at |tcp_timer.c:420| adds the [[srtt]] value to the [[rttvar]],
     shifted "appropriately", and sets [[srtt]] to zero.  [[srtt==0]] is the
     indication (in BSD) that the [[srtt]] is invalid.  We instead code this
     with a separate boolean, and are thus able to keep using
     both [[srtt]] and [[rttvar]].

     But comparing with |tcp_var.h:281|, where the values are used,
     reveals that the correction is in fact wrong.

     This is not visible in the [[RexmtSyn]] case (where it would be most
     obvious),  because in that case the [[srtt]] never was valid,
     and [[rttvar]] was cunningly hacked up to give the right value (in
     |tcp_subr.c:542| --- and the |tcp_timer.c:420| code has no effect at
     all.
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_sched]] ALL Scheduling parameters

Parameters controlling the timing of the OS scheduler.

:*)
(* ------------------------------------------------------------------ *)

(* maximum host op scheduling delay: *)
let dschedmax = time (real_div 1000 1000) (* make large for now, tighten when better understood *)(*: @mergewithnext :*)


(* maximum inqueue scheduling delay: *)
let diqmax = time (real_div 1000 1000) (* make large for now, tighten when better understood *)(*: @mergewithnext :*)

(* maximum outqueue emission delay: *)
let doqmax = time (real_div 1000 1000) (* make large for now, tighten when better understood *)
(*:
@description
%
[[dschedmax]] is the maximum scheduling delay between a system call
yielding a return value and that return value being passed to the
process.
%
[[diqmax]] and [[doqmax]] are the maximum scheduling delays between a
message being placed on the queue and being processed (respectively,
emitted).
%
For now, pending investigation of tighter realistic upper bounds, they
are all made conservatively large.

:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_timer]] ALL Timers

Parameters controlling the rate and fuzziness of the various timers
used in the model.

:*)
(* ------------------------------------------------------------------ *)


let 
  HZ = (real_of_num 100) (* : real *) (* Note this is the FreeBSD 4.6 value. Becomes 1000 in
                      FreeBSD 6.0 *)

(*:
@description
The nominal rate at which the timestamp (etc.) clock ticks, in hertz (ticks per second).
:*)


let 
  tickintvlmin = real_div (real_of_num 100) (real_times (real_of_num 105) HZ) 
(*: @mergewithnext :*)

let 
  tickintvlmax = real_div (real_of_num 105) (real_times (real_of_num 100) HZ) 

(*:
@description
The actual bounds on the tick interval, in seconds-per-tick; must include [[1/HZ]], and be within the RFC1323 bounds of 1sec to 1msec.
:*)


let
  stopwatchfuzz = (real_div (real_of_num 5) (real_of_num 100))  (* +/- factor on accuracy of stopwatch timers *)
(*: @mergewithnext :*)

let 
  stopwatch_zero = Stopwatch(real_zero,real_div (real_of_num 1) (real_plus (real_of_num 1) stopwatchfuzz),(real_plus 1 stopwatchfuzz))

(*:
@description
A stopwatch timer is initialised to [[stopwatch_zero]], which gives it an initial time of [[0]] and a fuzz of [[stopwatchfuzz]].
:*)


let 
  SLOW_TIMER_INTVL = (real_div (real_of_num 1) (real_of_num 2))  (* slow timer is 500msec on BSD *)
(*: @mergewithnext :*)

let 
  SLOW_TIMER_MODEL_INTVL = real_div (real_of_num 1) (real_of_num 1000) (*: 1msec fuzziness to mask atomicity of model; Note that it might be possible to reduce this fuzziness :*)
(*: @mergewithnext :*)

let 
  FAST_TIMER_INTVL = real_div (real_of_num 1) (real_of_num 5)  (* fast timer is 200msec on BSD *)
(*: @mergewithnext :*)

let 
  FAST_TIMER_MODEL_INTVL = real_div (real_of_num 1) (real_of_num 1000) (*: 1msec fuzziness to mask atomicity of model; Note that it might be possible to reduce this fuzziness :*)
(*: @mergewithnext :*)

let 
  KERN_TIMER_INTVL = tickintvlmax  (* precision of select timer *)
(*: @mergewithnext :*)


let 
  KERN_TIMER_MODEL_INTVL = (the_time dschedmax) (*: Note that some fuzziness may be required here :*)
  (* Note this was previously 0usec fuzziness; it should really have some fuzziness, though dschedmax
     has a current value of 1s which is too high. Once epsilon_2 is used properly by the checker,
     we should be able to reduce this fuzziness as it will enable the time transitions to be
     split. e.g. in pselect rules, we really want to change from PSelect2() to Ret() states
     pretty much exactly when the timer goes off, then allow a further epsilon transition
     before returning. *)

(*:
@description
The slow, fast, and kernel timers are the timers used to control TCP time-related behaviour.
The parameters here set their rates and fuzziness.

The slow timer is used for retransmit, persist, keepalive, connection
establishment, FIN\_WAIT\_2, 2MSL, and linger timers.  The fast timer
is used for delayed acks.  The kernel timer is used for timestamp
expiry, \texttt{select}, and bad-retransmit detection.
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_portsetc]] ALL Ports, sockets, and files

Parameters defining the classes of ports, and limits on numbers of
file descriptors and sockets.

:*)
(* ------------------------------------------------------------------ *)

let 
  OPEN_MAX = 957  (*: typical value of |kern.maxfilesperproc| on one of our BSD boxen :*)
(*: @mergewithnext :*)

let 
  OPEN_MAX_FD = FD OPEN_MAX

(*:
@description
A process may hold a maximum of [[OPEN_MAX]] file descriptors at any
one time.  These are numbered consecutively from zero on non-Windows
architectures, and so the first forbidden file descriptor is [[OPEN_MAX_FD]].
:*)


let FD_SETSIZE x = (match x with
   | Linux_2_4_20_8 -> 1024
   | WinXP_Prof_SP1 -> 64
   | FreeBSD_4_6_RELEASE -> 1024 end)

(*:
@description
The sets of file descriptors used in calls to [[pselect]] can contain
only file descriptors numbered less than [[FD_SETSIZE]].

@variation WinXP

[[FD_SETSIZE]] refers to the maximum number of file descriptors in a
file descriptor set.
:*)



let 
  SOMAXCONN = 128 

(*:
@description
The maximum listen-queue length.
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_udp]] UDP UDP parameters

UDP-specific parameters.

:*)
(* ------------------------------------------------------------------ *)

let UDPpayloadMax x = (match x with
    | Linux_2_4_20_8 -> 65507
    | WinXP_Prof_SP1 -> 65507
    | FreeBSD_4_6_RELEASE -> 9216 end)

(*:
@description
The architecture-dependent maximum payload for a UDP datagram.
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_buffers]] ALL Buffers

Parameters to the buffer size computation.

:*)
(* ------------------------------------------------------------------ *)

let 
  MCLBYTES = 2048  (* BSD default on i386; really, just needs to be >=1500 to fit an etherseg *)
(*: @mergewithnext :*)

let 
  MSIZE = 256  (* BSD default on i386; really, size of an mbuf *)
(*: @mergewithnext :*)

let 
  SB_MAX = 256 * 1024  (* BSD *)
(*: @mergewithnext :*)

let 
  oob_extra_sndbuf = 1024 




(* ------------------------------------------------------------------ *)
(*:
@section [[params_flags]] ALL File and socket flag defaults

Default values of file and socket flags, applied on creation.  Some of
these are architecture-dependent. Note that [[SO_BSDCOMPAT]] should
really be set to [[T]] by default on FreeBSD.

:*)
(* ------------------------------------------------------------------ *)

let ff_default_b x = (match x with
(*: file flags default :*)
  | O_NONBLOCK -> false
  | O_ASYNC    -> false end)
(*: @mergewithnext :*)
let 
  ff_default = <| b = ff_default_b |>


let sf_default_b x = (match x with
(*: [[bool]] socket flags default :*)
  | SO_BSDCOMPAT  -> false
  | SO_REUSEADDR  -> false
  | SO_KEEPALIVE  -> false
  | SO_OOBINLINE  -> false
  | SO_DONTROUTE  -> false end)

let 
(*: [[num]] socket flags defaults :*)
  sf_default_n (* sf_default_n : arch -> socktype -> socknflag -> num *)
    x y z = (match (x,y,z) with
    (Linux_2_4_20_8,SOCK_STREAM,SO_SNDBUF     ) -> 16384  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_STREAM,SO_SNDBUF     ) -> 8192  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_STREAM,SO_SNDBUF) -> 32*1024  (* from code*)
    
  | (Linux_2_4_20_8,SOCK_STREAM,SO_RCVBUF     ) -> 43689  (* from tests - strange number? *)
  | (WinXP_Prof_SP1,SOCK_STREAM,SO_RCVBUF     ) -> 8192   (* from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_STREAM,SO_RCVBUF) -> 57344  (* from code, becomes 65536 in FreeBSD 6.0 *)
    
  | (Linux_2_4_20_8,SOCK_STREAM,SO_SNDLOWAT     ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_STREAM,SO_SNDLOWAT     ) -> 1  (* Note this value has not been checked in testing. *)
  | (FreeBSD_4_6_RELEASE,SOCK_STREAM,SO_SNDLOWAT) -> 2048  (* from code *)
    
  | (Linux_2_4_20_8,SOCK_STREAM,SO_RCVLOWAT     ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_STREAM,SO_RCVLOWAT     ) -> 1 
  | (FreeBSD_4_6_RELEASE,SOCK_STREAM,SO_RCVLOWAT) -> 1  (* from code *)
    
  | (Linux_2_4_20_8,SOCK_DGRAM,SO_SNDBUF      ) -> 65535  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_DGRAM,SO_SNDBUF      ) -> 8192   (* from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_DGRAM,SO_SNDBUF ) -> 9216   (* from code *)
    
  | (Linux_2_4_20_8,SOCK_DGRAM,SO_RCVBUF      ) -> 65535  (* correct from tests *)
  | (WinXP_Prof_SP1,SOCK_DGRAM,SO_RCVBUF      ) -> 8192   (* correct from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_DGRAM,SO_RCVBUF ) -> 42080  (*: from tests but:  41600 from code; i386 only as dependent on |sizeof(struct sockaddr_in)| :*)
    
  | (Linux_2_4_20_8,SOCK_DGRAM,SO_SNDLOWAT      ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_DGRAM,SO_SNDLOWAT      ) -> 1  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_DGRAM,SO_SNDLOWAT ) -> 2048  (* from code *)
    
  | (Linux_2_4_20_8,SOCK_DGRAM,SO_RCVLOWAT      ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SOCK_DGRAM,SO_RCVLOWAT      ) -> 1  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SOCK_DGRAM,SO_RCVLOWAT ) -> 1 (* from code *)
end)


let 
(*: [[time]] socket flags defaults :*)
  
  sf_default_t (* sf_default_t : socktflag -> time *) x = (match x with 
  | SO_LINGER     -> time_infty 
  | SO_SNDTIMEO   -> time_infty 
  | SO_RCVTIMEO   -> time_infty
end)


let
(*: socket flags defaults :*)
  sf_default arch socktype = <| b1 = sf_default_b;
                                n = sf_default_n arch socktype;
                                t = sf_default_t
                              |>

let 
(*: minimum values of [[num]] socket flags :*)
  sf_min_n  (* sf_min_n : arch -> socknflag -> num *)
    x y = (match (x,y) with
  | (Linux_2_4_20_8,SO_SNDBUF     ) -> 2048  (* from tests *)
  | (WinXP_Prof_SP1,SO_SNDBUF     ) -> 0  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SO_SNDBUF) -> 1  (* from code *)
  | (Linux_2_4_20_8,SO_RCVBUF     ) -> 256  (* from tests *)
  | (WinXP_Prof_SP1,SO_RCVBUF     ) -> 0  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SO_RCVBUF) -> 1  (* from code *)
  | (Linux_2_4_20_8,SO_SNDLOWAT     ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SO_SNDLOWAT     ) -> 1  (* Note this value has not been checked in testing. *)
  | (FreeBSD_4_6_RELEASE,SO_SNDLOWAT) -> 1  (* from code *)
  | (Linux_2_4_20_8,SO_RCVLOWAT     ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SO_RCVLOWAT     ) -> 1  (* Note this value has not been checked in testing. *)
  | (FreeBSD_4_6_RELEASE,SO_RCVLOWAT) -> 1  (* from code *)
end)


let
(*: maximum values of [[num]] socket flags :*)
  sf_max_n (* sf_max_n : arch -> socknflag -> num *) x y = (match (x,y) with
  | (Linux_2_4_20_8,SO_SNDBUF     ) -> 131070  (* from tests *)
  | (WinXP_Prof_SP1,SO_SNDBUF     ) -> 131070  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SO_SNDBUF) ->
       DIV (SB_MAX * MCLBYTES) (MCLBYTES + MSIZE)  (* from code *)
  | (Linux_2_4_20_8,SO_RCVBUF     ) -> 131070  (* from tests *)
  | (WinXP_Prof_SP1,SO_RCVBUF     ) -> 131070  (* from tests *)
  | (FreeBSD_4_6_RELEASE,SO_RCVBUF) ->
       DIV (SB_MAX * MCLBYTES) (MCLBYTES + MSIZE)  (* from code *)
  | (Linux_2_4_20_8,SO_SNDLOWAT     ) -> 1  (* from tests *)
  | (WinXP_Prof_SP1,SO_SNDLOWAT     ) -> 1  (* Note this value has not been checked in testing. *)
  | (FreeBSD_4_6_RELEASE,SO_SNDLOWAT) ->
       DIV (SB_MAX * MCLBYTES) (MCLBYTES + MSIZE)  (* clip to SO_SNDBUF *)
  | (Linux_2_4_20_8,SO_RCVLOWAT     ) -> w2n INT32_SIGNED_MAX  (* from code *)
  | (WinXP_Prof_SP1,SO_RCVLOWAT     ) -> 1  (* Note this value has not been checked in testing. *)
  | (FreeBSD_4_6_RELEASE,SO_RCVLOWAT) ->
       DIV (SB_MAX * MCLBYTES) (MCLBYTES + MSIZE)(* clip to SO_RCVBUF *)
end)


let 
(*: maximum value of [[send]]/[[recv]] timeouts :*)
  sndrcv_timeo_t_max = time (real_of_num 655350000)
(*: @mergewithnext :*)

let 
(*: maximum value of [[pselect]] timeouts :*)
  pselect_timeo_t_max = time (real_of_num (31 * 24 * 3600))




(* ------------------------------------------------------------------ *)
(*:
@section [[params_rfc]] TCP RFC-specified limits

Protocol value limits specified in the TCP RFCs.

:*)
(* ------------------------------------------------------------------ *)

let
(*:
RFC1323 s4.2.3: timestamp validity period.
:*)  dtsinval = time (real_of_num (24 * 24 * 60 * 60))



let 
(*: maximum (scaled) window size :*)
  TCP_MAXWIN = 65535 
(*: @mergewithnext :*)

let
(*: maximum window scaling exponent :*)
  TCP_MAXWINSCALE = 14 

(*:
@description
The maximum (scaled) window size value is [[TCP_MAXWIN]], and
the maximum scaling exponent is [[TCP_MAXWINSCALE]].  Thus the maximum
window size is [[TCP_MAXWIN << TCP_MAXWINSCALE]].
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_proto]] TCP Protocol parameters

Various TCP protocol parameters, many adjustable by |sysctl| settings
(or equivalent).  The values here are typical.  It was not considered
worthwhile modelling these parameters changing during operation.

:*)
(* ------------------------------------------------------------------ *)

let 
(*: initial [[t_maxseg]], modulo route and link MTUs :*)
  MSSDFLT = (512 : num)  (* BSD default; RFC1122 sec. 4.2.2.6 says this MUST be 536 *)


let 
(*: initial [[snd_cwnd]] for local connections :*)
  SS_FLTSZ_LOCAL = (4 : num)  (* BSD; is a sysctl *)
(*: @mergewithnext :*)

let 
(*: initial [[snd_cwnd]] for non-local connections :*)
  SS_FLTSZ = (1 : num)  (* BSD; is a sysctl *)


let 
(*: do NewReno fast recovery :*)
  TCP_DO_NEWRENO = (true : bool) (* BSD default *)


let 
  TCP_Q0MINLIMIT = (30 : num)  (* FreeBSD 4.6-RELEASE: tcp_syncache.bucket_limit *)
(*: @mergewithnext :*)

let 
  TCP_Q0MAXLIMIT = (512 * 30 : num)  (* FreeBSD 4.6-RELEASE: tcp_syncache.cache_limit *)

(*:
@description
The incomplete-connection listen queue [[q0]] has a nondeterministic
length limit.  Connections \emph{may} be dropped once [[q0]] reaches
[[TCP_Q0MINLIMIT]], and \emph{must} be dropped once [[q0]] reaches
[[TCP_Q0MAXLIMIT]].
:*)


let 
  backlog_fudge (n:int) = num_MIN (SOMAXCONN:num) (clip_int_to_num n)

(*:
@description
The backlog length fudge-factor function, which translates the
requested length of the listen queue into the actual value used.  Some
architectures apply a linear transformation here.
:*)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_timevalues]] TCP Time values

Various time intervals controlling TCP's behaviour.

:*)
(* ------------------------------------------------------------------ *)

let 
  TCPTV_DELACK = time (real_div (real_of_num 1) (real_of_num 10))  (* FreeBSD 4.6-RELEASE, tcp_timer.h *)

(*: @description
TODO3: SAY WHAT ALL THESE TIMER VALUES MEAN
:*)



let 
  TCPTV_RTOBASE = ((real_of_num 3) : duration) (* initial RTT, in seconds: FreeBSD 4.6-RELEASE, tcp_timer.h *)
(*: @mergewithnext :*)

let 
  TCPTV_RTTVARBASE = (real_zero : duration)  (* initial retransmit variance, in seconds *)
     (* FreeBSD has no way of encoding an initial RTT variance,
        but we do (thanks to tf_srttvalid); it should be zero
        so TCPTV_RTOBASE = initial RTO *)
(*: @mergewithnext :*)

let 
  TCPTV_MIN = ((real_of_num 1) : duration)  (* minimum RTT in absence of cached value, in seconds: FreeBSD 4.6-RELEASE, tcp_timer.h *)
(*: @mergewithnext :*)

let 
  TCPTV_REXMTMAX = time (real_of_num 64)  (* BSD: maximum possible RTT *)



let 
  TCPTV_MSL = time (real_of_num 30) (* maximum segment lifetime: BSD: tcp_timer.h:79 *)



let 
  TCPTV_PERSMIN = time (real_of_num 5)  (* BSD: minimum possible persist interval: tcp_timer.h:85 *)
(*: @mergewithnext :*)

let 
  TCPTV_PERSMAX = time (real_of_num 60)  (* BSD: maximum possible persist interval: tcp_timer.h:86 *)



let 
  TCPTV_KEEP_INIT = time (real_of_num 75) (* connect timeout: BSD: tcp_timer.h:88 *)
(*: @mergewithnext :*)

let 
  TCPTV_KEEP_IDLE = time (real_of_num (120*60)) (* time before first keepalive probe: BSD: tcp_timer.h:89 *)
(*: @mergewithnext :*)

let 
  TCPTV_KEEPINTVL = time (real_of_num 75) (* time between subsequent keepalive probes: BSD: tcp_timer.h:90 *)
(*: @mergewithnext :*)

let 
  TCPTV_KEEPCNT = (8 : num) (* max number of keepalive probes (+/- a few?): BSD: tcp_timer.h:91 *)
(*: @mergewithnext :*)

let 
  TCPTV_MAXIDLE = real_mult_time (real_of_num 8) TCPTV_KEEPINTVL (* BSD calls this tcp_maxidle *)




(* ------------------------------------------------------------------ *)
(*:
@section [[params_timingrelated]] TCP Timing-related parameters

Parameters relating to TCP's exponential backoff.

:*)
(* ------------------------------------------------------------------ *)

let  (* TCP exponential retransmit backoff: BSD: from source code, tcp_timer.c:155 *)
  TCP_BSD_BACKOFFS = ([ 1; 2; 4; 8; 16; 32; 64; 64; 64; 64; 64; 64; 64 ] : list num)
(*: @mergewithnext :*)

let  (* TCP exponential retransmit backoff: Linux: experimentally determined *)
  TCP_LINUX_BACKOFFS = ([ 1; 2; 4; 8; 16; 32; 64; 128; 256; 512; 512 ] : list num) (* Note: the tail may be  incomplete *)
(*: @mergewithnext :*)

let  (* TCP exponential retransmit backoff: WinXP: experimentally determined *)
  TCP_WINXP_BACKOFFS = ([ 1; 2; 4; 8; 16 ] : list num) (* Note: the tail may be incomplete *)


let 
(*: TCP maximum retransmit shift :*)
  TCP_MAXRXTSHIFT = (12 : num)  (* TCPv2p842 *)
(*: @mergewithnext :*)

let 
(*: TCP maximum SYNACK retransmit shift :*)
  TCP_SYNACKMAXRXTSHIFT = (3 : num)  (* FreeBSD 4.6-RELEASE, tcp_syncache.c:SYNCACHE_MAXREXMTS *)



let  (* TCP exponential SYN retransmit backoff: BSD: tcp_timer.c:152 *)
  TCP_SYN_BSD_BACKOFFS = ([ 1; 1; 1; 1; 1; 2; 4; 8; 16; 32; 64; 64; 64 ] : list num) (* Our experimentation shows that this list stops at 8. This will be
   due to the connection establishment timer firing. Values here are
   obtained from the BSD source *)
(*: @mergewithnext :*)

let  (* TCP exponential SYN retransmit backoff: Linux: experimentally determined *)
  TCP_SYN_LINUX_BACKOFFS = ([ 1; 2; 4; 8; 16 ] : list num)  (* This list might be longer. Experimentation does not show further entries, perhaps
   due to the connection establishment timer firing *)

(*: @mergewithnext :*)

let  (* TCP exponential SYN retransmit backoff: WinXP: experimentally determined *)
  TCP_SYN_WINXP_BACKOFFS = ([ 1; 2 ] : list num)  (* This list might be longer. Experimentation does not show further entries, perhaps
   due to the connection establishment timer firing *)




(* -------------------------------------------------- *)
(*
val _ = export_theory();
*)