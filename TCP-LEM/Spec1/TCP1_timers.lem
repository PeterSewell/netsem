(*
(* A HOL98 specification of TCP *)

(* Definitions and support for various kinds of timer *)

(*[ RCSID "$Id: TCP1_timersScript.sml,v 1.60 2005/10/20 09:00:14 tjr22 Exp $" ]*)

(* standard prefix *)
open HolKernel boolLib Parse

open BasicProvers bossLib

open HolDoc

local open TCP1_baseTypesTheory TCP1_utilsTheory in end

local open arithmeticTheory realTheory word32Theory in end;

val _ = BasicProvers.augment_srw_ss [rewrites [LET_THM]]

val _ = new_theory "TCP1_timers";

val _ = Version.registerTheory "$RCSfile: TCP1_timersScript.sml,v $" "$Revision: 1.60 $" "$Date: 2005/10/20 09:00:14 $";
*)

open import Pervasives_extra
open TCP1_lemSupport
open TCP1_baseTypes
open TCP1_utils


(* -------------------------------------------------- *)
(*      TIMERS                                        *)
(* -------------------------------------------------- *)

(*: @chapter [[TCP1_timers]] Timers

This file defines the various kinds of timer that are used by the host
specification.
%
   Timers are host-state components that are updated by the
   passage of time, in [[Lh_epsilon dur]] transitions.
%
   We define four kinds of timer:

\begin{enumerate}
\item the deadline timer ([['a timed]]), which wraps a value in a timer
      that will count towards a (possibly fuzzy) deadline, and stop
      the progress of time when it reaches the maximum deadline.

\item the time-window timer ([['a timewindow]]), which wraps a value in a
      timer just like a deadline timer, except that the value merely
      vanishes when it expires, rather than impeding the progress of
      time.

      These are an optimisation, designed to avoid having an extra
      rule (and consequent [[Lh_tau]] transitions) just for processing the
      expiry of such values.

\item the ticker ([[ticker]]), which contains a [[ts_seq]] (integral
      wraparound 32-bit type) that is incremented by one for every
      time a certain interval passes.  It also contains the real
      remainder, and the interval size that corresponds to a step.

\item the stopwatch ([[stopwatch]]), which may be reset at any time
      and counts upwards indefinitely from zero.  Note it may be
      necessary to add some fuzziness to this timer.

\end{enumerate}

   For each timer we define a constructor and a time-passage function.
   The time-passage function takes a duration (positive real) and a
   timer, and returns either the timer, or [[NONE]] if time is not
   permitted by the timer to pass that far (i.e., an urgent instant
   would be passed).  Timers that never need to stop time do not
   return an option type.  Timers that behave nondeterministically are
   defined relationally (taking the "result" as argument and returning
   a bool).

   For all of them, we want the two properties defined by Lynch and
   Vaandrager in Inf. and Comp., 128(1), 1996
   (http://theory.lcs.mit.edu/tds/papers/Lynch/IC96.html) as S1 and S2
   to hold.

:*)

(* -------------------------------------------------------------------- *)
(*   PROPERTIES                                                         *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_props]] ALL Properties

Axioms of time, that all timers must satisfy.

:*)

let
  time_pass_additive
                      (time_pass : (duration -> 'a -> 'a -> bool) )
     = forall dur1 dur2 s0 s1 s2.         
(time_pass dur1 s0 s1 && time_pass dur2 s1 s2) --> time_pass (real_plus dur1 dur2) s0 s2
(*: @description
Property S1, additivity:
%
    If [[s' -- (Lh_epsilon d) --> s'']] and [[s'' -- (Lh_epsilon d') --> s]] then [[s' -- (Lh_epsilon (d+d')) --> s]].
:*)

let  
  time_pass_trajectory
                      (time_pass : (duration -> 'a -> 'a -> bool) )
     = forall dur s0 s1.
         time_pass dur s0 s1
         -->         
(exists w.
           w real_zero = s0 &&           
(w dur = s1 &&           
(forall t t'.             
(real_lte real_zero t && (real_lte t dur &&             
(real_lte real_zero t' && (real_lte t' dur &&
             real_lt t t'))))
             -->
             time_pass (real_minus t' t) (w t) (w t'))))

(*: @description
Property S2 is defined as follows:
    Each time passage step [[s' -- (Lh_epsilon d) --> s]] has a \emph{trajectory},
  where a trajectory is defined as follows.
  If $I$ is any left-closed interval of $\mathbb{R} \geq 0$ beginning with 0, then
  an $I$-trajectory is a function $w$ from $I$ to $\mathrm{states}(A)$ such that
    [[w(t) -- (Lh_epsilon (t'-t)) --> w(t')]] for all $t$,$t'$ in $I$ with $t < t'$.

  Now define $w.\mathrm{fstate} = w(0)$, $w.\mathrm{ltime}$ to be the supremum of $I$, and if
  $I$ is right-closed, $w.\mathrm{lstate} = w(w.\mathrm{ltime})$.  Then a trajectory for a
  step [[s' -- (Lh_epsilon d) --> s]] is a $[0,d]$-trajectory with $w.\mathrm{fstate} = s'$ and
  $w.\mathrm{lstate} = s$.

  In our case, S2 (which we call ``trajectory'') may be stated as follows:
     For each time passage step [[s' -- (Lh_epsilon d) --> s]], there exists a
     function $w$ from $[0,d]$ to states such that $w(0) = s'$, $w(d) = s$,
     and [[w(t) -- (Lh_epsilon (t'-t)) --> w(t')]] for all $t$,$t'$ in $[0,d]$ with $t < t'$.

:*)


let
  opttorel
            tp dur x y
     = match tp dur x with
           Just x' -> y = x'
        | Nothing    -> false
end
(*: @description
Impedance-matching coercion.
:*)


(* -------------------------------------------------------------------- *)
(*   BASIC TIMER : timer                                                *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_timer]] ALL Basic timer [[timer]]

The basic timer, [[timer]], is a triple of the elapsed time, the
minimum expiry time, and the maximum expiry time.  It may expire at
any time after the minimum expiry time, but time may not progress
beyond the maximum expiry time.

:*)

(* building block for deadline timer and time-window timer *)
type timer = Timer of (duration * time * time)  (* elapsed, min, max *)

let 
  (*: timer that goes off in the interval [[ [d-eps,d+fuz] ]], like a BSD ticks-based timer :*)
  (*: [[fuz]] is some fuzziness added to mask the atomic nature of the model. :*)

  fuzzy_timer (* fuzzy_timer : time -> duration -> duration -> timer *)
               d eps fuz = Timer(real_zero,time_minus_dur d eps,time_plus_dur d fuz)

let 
(*: timer that goes off at exactly [[d]] after now :*)
  sharp_timer d = fuzzy_timer d time_zero time_zero
 (*: @mergewithnext :*) 
let 
(*: timer that never goes off :*)
  never_timer = Timer(real_zero,time_infty,time_infty)
 (*: @mergewithnext :*) 
let 
(*: timer that goes off between now and [[d]] :*)
  upper_timer d = Timer(real_zero,time_zero,d)


let 
  (* true if the timer may expire now *)
  (* NB: we assume below that this is monotonic; if it is once true it
     is always true (at least at any time that can be reached *)
  timer_expires (* timer_expires : timer -> bool *) (Timer(e,deadmin,deadmax))
  = (time_gte (time e) deadmin)

let
(* state of timer after time passage *)
  Time_Pass_timer (* Time_Pass_timer : duration -> timer -> timer option *)
     dur (Timer(e,deadmin,deadmax))
   = let e' = real_plus e dur
     in
     if time_lte (time e') deadmax
     then SOME (Timer(e',deadmin,deadmax))
     else NONE


let _FIXME_assertion_Time_Pass_timer_additive =
  time_pass_additive (opttorel Time_Pass_timer)
let _FIXME_assertion_Time_Pass_timer_trajectory =
  time_pass_additive (opttorel Time_Pass_timer)


(* -------------------------------------------------------------------- *)
(*   DEADLINE TIMER : 'a timed                                          *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_timed]] ALL Deadline timer [[timed]]

The deadline timer [['a timed]] is simply a value [['a]] annotated by
a [[timer]].  This is a very convenient idiom.

:*)

(* deadline timer *)
(*[ NEWMODE straighttimed ]*)
(*[ HOL_CURRIED_ALIST
  Timed "" 99 false false
]*)
type timed 'a = Timed of ('a * timer)
(*[ MODE 0 ]*)


let timed_val_of (Timed(x,_)) = x
let timed_timer_of (Timed(x,d)) = d
let timed_expires (Timed(_,d)) = timer_expires d

let
  Time_Pass_timed  (* Time_Pass_timed : duration -> 'a timed -> 'a timed option *)
     dur (Timed(x,d))
   = match Time_Pass_timer dur d with
        Just d' -> Just (Timed(x,d'))
     | Nothing    -> Nothing
end


let _FIXME_assertion_Time_Pass_timed_additive =
  time_pass_additive (opttorel Time_Pass_timed)
let _FIXME_assertion_Time_Pass_timed_trajectory =
  time_pass_additive (opttorel Time_Pass_timed)


(* -------------------------------------------------------------------- *)
(*   TIME-WINDOW TIMER : 'a timewindow                                  *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_timewindow]] ALL Time-window timer [[timewindow]]

The time-window timer [['a timewindow]], rendered as [[TimeWindow(x,d)]], is like a deadline timer [['a
timed]], except that when it expires the value merely evaporates,
rather than causing time to stop.  Thus an [['a timewindow]] never
induces urgency.

:*)

(* time-window timer *)
(*[ NEWMODE straighttimewindow ]*)
(*[ HOL_CURRIED_ALIST TimeWindow "" 99 false false
]*)
type timewindow 'a = TimeWindow of ('a * timer) | TimeWindowClosed
(*[ MODE 0 ]*)

let 
  timewindow_val_of x = (match x with
  | (TimeWindow(x,_)) -> Just x 
  |  TimeWindowClosed -> Nothing end)


let 
  timewindow_open x = (match x with
  | (TimeWindow(_,_)) -> true
  |  TimeWindowClosed -> false end)

let
  Time_Pass_timewindow (* Time_Pass_timewindow : duration -> 'a timewindow -> 'a timewindow -> bool *)
     dur x tw'
   = (match x with
  | (TimeWindow(x,d)) -> (match Time_Pass_timer dur d with
         Nothing    -> tw' = TimeWindowClosed
      | Just d' -> tw' = TimeWindow(x,d') ||
                    (timer_expires d' && (tw' = TimeWindowClosed)) end) 
  | TimeWindowClosed  -> (tw' = TimeWindowClosed) end)

let _FIXME_assertion_Time_Pass_timewindow_additive =
  time_pass_additive Time_Pass_timewindow
let _FIXME_assertion_Time_Pass_timewindow_trajectory =
  time_pass_additive Time_Pass_timewindow


(* -------------------------------------------------------------------- *)
(*   TICKER : ticker                                                    *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_ticker]] ALL Ticker [[ticker]]

A ticker [[ticker]] models a discrete time counter.  It contains a
counter, a remainder, a minimum duration, and a maximum duration.  The
counter is incremented at least once every maximum duration, and at
most once every minimum duration.  The remainder stores the time since
the last increment.

:*)

(* ticker *)
(* Might think it would be more straightforward to simply have a 10ms
   timer and a rule that bumps the tick count whenever it fires; but that
   would yield a tau step every 10milliseconds, which would get rather
   annoying. *)
type ticker = Ticker of (ts_seq * duration(* may be zero *) * duration * duration)

let ticks_of (Ticker(ticks,_,_,_)) = ticks

(* leave this out of any rewriting phases; it can be usefully treated as an
   atomic relation *)
let 
  Time_Pass_ticker (* Time_Pass_ticker : duration -> ticker -> ticker -> bool *)
     dur (Ticker(ticks,remdr,intvlmin,intvlmax)) t'
   = let d = real_plus remdr dur
     in
       exists delta remdr'.
          real_lte (real_minus d (real_times (real_of_num delta) intvlmax)) remdr' &&          
(real_lte remdr' (real_minus d (real_times (real_of_num delta) intvlmin)) &&          
(real_lte real_zero remdr' && (real_lt remdr' intvlmax &&          
(t' = Ticker(seq32_plus ticks delta, remdr', intvlmin, intvlmax)))))

let
  ticker_ok (Ticker(ticks, remdr, imin, imax)) =
    (real_lte real_zero remdr && (real_lt remdr imax && (real_lte imin imax && real_lt real_zero imin)))

let
  tick_imin(Ticker(t,r,imin, imax)) = imin

let 
  tick_imax(Ticker(t,r,imin,imax)) = imax


let _FIXME_assertion_Time_Pass_ticker_additive =
  time_pass_additive Time_Pass_ticker
let _FIXME_assertion_Time_Pass_ticker_trajectory =
  time_pass_trajectory Time_Pass_ticker


(* -------------------------------------------------------------------- *)
(*   STOPWATCH : stopwatch                                              *)
(* -------------------------------------------------------------------- *)

(*: @section [[timers_stopwatch]] ALL Stopwatch [[stopwatch]]

The stopwatch [[stopwatch]] records the time since it was started,
with fuzziness introduced by means of a minimum and maximum rate
factor applied to the passage of time.

:*)

type stopwatch = Stopwatch of (duration(* may be zero *) * real * real)

let
  stopwatch_val_of (Stopwatch(d,_,_)) = d


let 
  Time_Pass_stopwatch (* Time_Pass_stopwatch : duration -> stopwatch -> stopwatch -> bool *)
    dur (Stopwatch(d,ratemin,ratemax)) s'
   = exists rate. real_lte ratemin rate && (real_lte rate ratemax &&     
(s' = Stopwatch(real_plus d (real_times dur rate),ratemin,ratemax)))

let _FIXME_assertion_Time_Pass_stopwatch_additive =
  time_pass_additive Time_Pass_stopwatch
let _FIXME_assertion_Time_Pass_stopwatch_trajectory =
  time_pass_additive Time_Pass_stopwatch


(* -------------------------------------------------- *)

(*
val _ = export_theory();
*)