(*
(* A HOL98 specification of TCP *)

(* Basic types used in the specification, including language types and time types *)

(*[ RCSID "$Id: TCP1_baseTypesScript.sml,v 1.66 2009/02/17 11:56:46 tjr22 Exp $" ]*)

(* standard prefix *)
open HolKernel boolLib Parse
infix THEN THENC |-> ##

open bossLib

open HolDoc

local open TCP1_errorsTheory TCP1_signalsTheory TCP1_utilsTheory in end

local open arithmeticTheory stringTheory pred_setTheory integerTheory
           finite_mapTheory realTheory word32Theory in end;

val _ = new_theory "TCP1_baseTypes";

val _ = Version.registerTheory "$RCSfile: TCP1_baseTypesScript.sml,v $" "$Revision: 1.66 $" "$Date: 2009/02/17 11:56:46 $";
*)

open import Pervasives_extra
open TCP1_lemSupport
open TCP1_errors 
open TCP1_signals 
open TCP1_utils

(*: @chapter [[TCP1_baseTypes]] Base types

This file defines basic types used throughout the specification.
%including
%types for ports, IP addresses, and file descriptors; types of file and socket flags used in the sockets API;
%
%
%the language types and the time and duration
%types.

:*)

(* -------------------------------------------------- *)
(*                       TYPES REQUIRED FOR TL        *)
(* -------------------------------------------------- *)

(*: @section [[base_os]] ALL Network and OS-related types

The specification distinguishes between the types [[port]] and [[ip]],
for which we do not use the zero values, and option types [[port option]] and
[[ip option]], with values [[NONE]] (modelling the zero values) and [[SOME p]] and [[SOME i]], modelling the non-zero values.
Zero values are used as wildcards in some places and are forbidden in others;
this typing lets that be captured explicitly.
:*)

type port = Port of nat (*: really 16 bits, non-zero :*)
(*: @description
TCP or UDP port number, non-zero.
:*)

type ip   = ip of nat (*: really 32 bits, non-zero :*)
(*: @description
IPv4 address, non-zero.
:*)


type ifid = LO | ETH of nat
(*: @description
Interface ID: either the loopback interface, or a numbered Ethernet interface.
:*)


type netmask = NETMASK of nat
(*: @description
Network mask, represented as the number of 1 bits (as in a CIDR /nn
suffix).
:*)


type fd = FD of nat
(*: @description
File descriptor.  On Unix-like systems this is a small nonnegative
integer; on Windows it is an arbitrary handle.

@internal
     This was FD of int, but I can't find any rationale for the
     choice.  It's an index into a table of open file descriptions,
     and so can't by definition be negative.
:*)



(*: @section [[base_flags]] ALL File and socket flags

This defines the types of various flags used in the sockets API: file flags, socket flags, message flags (used in [[send]] and [[recv]] calls), and socket types (used in [[socket]] calls).  The socket flags are partitioned into those with boolean, natural-number and time-valued arguments.
:*)

type filebflag = O_NONBLOCK
             | O_ASYNC

(*: @description
Boolean flags affecting the behaviour of an open file (or socket).

[[O_NONBLOCK]] makes all operations on this file (or socket) nonblocking.

[[O_ASYNC]] specifies whether signal driven I/O is enabled.

:*)


type sockbflag = SO_BSDCOMPAT (* Linux only *)
             | SO_REUSEADDR
             | SO_KEEPALIVE
             | SO_OOBINLINE (* ? *)
             | SO_DONTROUTE

(*: @description
Boolean flags affecting the behaviour of a socket.

     [[SO_BSDCOMPAT]] Specifies whether the BSD semantics for delivery of ICMPs to UDP sockets
     with no peer address set is enabled.

     [[SO_DONTROUTE]] Requests that outgoing messages bypass the standard routing
     facilities. The destination shall be on a directly-connected network, and messages are directed
     to the appropriate network interface according to the destination address.

    [[SO_KEEPALIVE]] Keeps connections active by enabling the periodic transmission of
     messages, if this is supported by the protocol.

     [[SO_OOBINLINE]] Leaves received out-of-band data (data marked urgent) inline.

     [[SO_REUSEADDR]] Specifies that the rules used in validating addresses supplied to
     [[bind()]] should allow reuse of local ports, if this is supported by the protocol.


@variation Linux
The flag [[SO_BSDCOMPAT]] is Linux-only.
:*)


type socknflag = SO_SNDBUF
             | SO_RCVBUF
             | SO_SNDLOWAT
             | SO_RCVLOWAT

(*: @description
Natural-number flags affecting the behaviour of a socket.

     [[SO_SNDBUF]] Specifies the send buffer size.

     [[SO_RCVBUF]] Specifies the receive buffer size.

     [[SO_SNDLOWAT]] Specifies the minimum number of bytes to process for socket output
      operations.

     [[SO_RCVLOWAT]] Specifies the minimum number of bytes to process for socket input
     operations.
:*)


type socktflag = SO_LINGER
             | SO_SNDTIMEO
             | SO_RCVTIMEO

(*: @description
Time-valued flags affecting the behaviour of a socket.

   [[SO_LINGER]]  specifies a maximum duration
    that a [[close(fd)]] call is permitted to block.

     [[SO_RCVTIMEO]] specifies the timeout value for input operations.

     [[SO_SNDTIMEO]] specifies the timeout value for an output function blocking because flow
     control prevents data from being sent.


:*)


type msgbflag = MSG_PEEK      (* recv only, [in] *)
            | MSG_OOB       (* recv and send, [in] *)
            | MSG_WAITALL   (* recv only, [in] *)
            | MSG_DONTWAIT  (* recv and send, [in] *)

(*: @description
Boolean flags affecting the behaviour of a [[send]] or [[recv]] call.

 [[MSG_DONTWAIT]]: Do not block if there is no data available.

 [[MSG_OOB]]: Return out-of-band data.

 [[MSG_PEEK]]: Read data but do not remove it from the socket's receive queue.

 [[MSG_WAITALL]]: Block untill all [[n]] bytes of data are available.

:*)


type socktype = SOCK_STREAM
             | SOCK_DGRAM

(*: @description
The two different flavours of socket, as passed to the [[socket]] call,
  [[SOCK_STREAM]] for TCP and [[SOCK_DGRAM]] for UDP.

:*)



(*: @section [[base_langinter]] GEN Language interaction types

The specification makes almost no assumptions on the programming language used to drive sockets calls.  It supposes that calls are made by threads, with thread IDs of type [[tid]], and that calls return values of the [[err]] types indicating success or failure.
Our \textsf{OCaml} binding maps the latter to exceptions.

Values occuring as arguments or results of sockets calls are typed.
There is a HOL type [[TLang_type]] of the names of these types and a
HOL type [[TLang]] which is a disjoint union of all of their values.
An inductive definition defines a typing relation between the two.



:*)

type tid = TID of nat
(*: @description
Thread IDs.

@internal
Or do we want names?
:*)


(* REMARK tjr the following type is overly general in taking an 'a;
further, OK is overloaded later in this file in a (to me) very
confusing manner *)

type err 'a = OK of 'a | FAIL of error
(*: @description
Each library call returns either success ([[OK v]]) or failure ([[FAIL err]]).

:*)

(*
val _ = Hol_datatype `exn = EX_udp of error
                          | EX_match_failure of (string # num # num)`
(*: @description

The language appears to have exceptions

:*)


type except = EOK of 'a | EEX of exn`
(*: @description

- isn't this for something we don't do?
:*)

*)

(* -------------------------------------------------- *)
(*                   LANGUAGE TYPES                   *)
(* -------------------------------------------------- *)

(* (*: @section [[base_langty]] ALL Language types :*) *)

type TLang_type = TLty_int
              | TLty_bool
              | TLty_string
              | TLty_one
              | TLty_pair of (TLang_type * TLang_type)
              | TLty_list of TLang_type
              | TLty_lift of TLang_type
              | TLty_err of TLang_type
              | TLty_fd
              | TLty_ip
              | TLty_port
              | TLty_error
              | TLty_netmask
              | TLty_ifid
              | TLty_filebflag
              | TLty_sockbflag
              | TLty_socknflag
              | TLty_socktflag
	      | TLty_socktype
              | TLty_tid
              | TLty_signal
(*: @description
Type names for language types that are used in the sockets API.
:*)



(*              | TLty_void                   *)
(*              | TLty_ref of TLang_type      *)
(*              | TLty_exn                    *)
(*              | TLty_except of TLang_type   *)

(*
val _ = Hol_datatype `location = Loc of TLang_type # num `
(*: @description
Locations.
:*)
;
*)

type one = unit (* | One *)

let one = () (* One *)

type TLang = TL_int of int
         | TL_bool of bool
         | TL_string of string
         | TL_one of one
         | TL_pair of (TLang * TLang)
         | TL_list of list TLang 
         | TL_option of maybe TLang 
         | TL_err of err TLang 
         | TL_fd of fd
         | TL_ip of ip
         | TL_port of port
         | TL_error of error
         | TL_netmask of netmask
         | TL_ifid of ifid
         | TL_filebflag of filebflag
         | TL_sockbflag of sockbflag
         | TL_socknflag of socknflag
         | TL_socktflag of socktflag
         | TL_socktype of socktype
         | TL_tid of tid
         | TL_signal of signal
(*: @description
Language values.

:*)

(* let _MEM x xs = List.mem x xs *)

(* Note that one of [[TLty_lift]] and [[TL_option]] needs to be fixed so that the names are consistent. *)

let SOME = Just
let NONE = Nothing

indreln
[ tlang_typing:  TLang -> TLang_type -> bool ]

       r1: forall i. true ==> tlang_typing (TL_int i) TLty_int and

       r2: forall b. true ==> tlang_typing (TL_bool b) TLty_bool and

       r3: forall s. true ==> tlang_typing (TL_string s) TLty_string and

       r4: forall. true ==> tlang_typing (TL_one one) TLty_one and

       r5: forall p1 p2 ty1 ty2.
            tlang_typing p1 ty1 && tlang_typing p2 ty2 ==>
            tlang_typing (TL_pair(p1,p2)) (TLty_pair(ty1,ty2)) and

       r6: forall tl ty. (forall e. elem e tl --> tlang_typing e ty) ==>
                tlang_typing (TL_list tl) (TLty_list ty) and

       r7: forall p ty. tlang_typing p ty ==>
               tlang_typing (TL_option (SOME p)) (TLty_lift ty) and
       r8: forall ty. true ==> tlang_typing (TL_option NONE) (TLty_lift ty) and

       r9: forall e ty. true ==> tlang_typing (TL_err (FAIL e)) (TLty_err ty) and
       r10: forall p ty. tlang_typing p ty ==>
               tlang_typing (TL_err (OK p)) (TLty_err ty) and

       r11: forall fd. true ==> tlang_typing (TL_fd fd) TLty_fd and

       r12: forall i. true ==> tlang_typing (TL_ip i) TLty_ip and
       r13: forall p. true ==> tlang_typing (TL_port p) TLty_port and
       r14: forall e. true ==> tlang_typing (TL_error e) TLty_error and
       r15: forall nm. true ==> tlang_typing (TL_netmask nm) TLty_netmask and
       r16: forall ifid. true ==> tlang_typing (TL_ifid ifid) TLty_ifid and
       r17: forall ff. true ==> tlang_typing (TL_filebflag ff) TLty_filebflag and
       r18: forall sf. true ==> tlang_typing (TL_sockbflag sf) TLty_sockbflag and
       r19: forall sf. true ==> tlang_typing (TL_socknflag sf) TLty_socknflag and
       r20: forall sf. true ==> tlang_typing (TL_socktflag sf) TLty_socktflag and
       r21: forall st. true ==> tlang_typing (TL_socktype st) TLty_socktype and
       r22: forall tid. true ==> tlang_typing (TL_tid tid) TLty_tid and
(*       (forall l ty. tlang_typing (TL_ref (Loc (ty,l))) (TLty_ref ty)) /\ *)
(*       (forall ex. tlang_typing (TL_exn ex) TLty_exn ) /\ *)
(*       (forall p ty.  tlang_typing p ty ==>                    *)
(*                tlang_typing (TL_except (EOK p)) (TLty_except ty)) /\ *)
(*        (forall ex ty.  tlang_typing (TL_exn ex) TLty_exn ==> *)
(*                 tlang_typing (TL_except (EEX ex)) (TLty_except ty)) /\ *)
       r23: forall s. true ==> tlang_typing (TL_signal s) TLty_signal


(*
val TLang_typing_thm = let
  open simpLib
  fun app_letter ty ctxt = let
    open Lexis
    val tyopname = #1 (dest_type ty)
        handle HOL_ERR _ => (* if a vartype *) dest_vartype ty
    val letter = gen_variant tmvar_vary ctxt (String.substring(tyopname, 0, 1))
  in
    (letter::ctxt, mk_var(letter, ty))
  end
  fun gen_case constr = let
    val cty = type_of constr
    val (argtys, _) = strip_fun cty
    val (_ (* varnames used *), args) = stmonad.mmap app_letter argtys []
    val tm = list_mk_comb(constr, args)
  in
    GEN_ALL (CONV_RULE (SIMP_CONV (BasicProvers.srw_ss()) [])
                       (SPEC tm TLang_typing_cases))
  end
in
  save_thm("TLang_typing_thm",
           LIST_CONJ (map gen_case (TypeBase.constructors_of ``:TLang``)))
end
*)

(* -------------------------------------------------- *)
(*                     OK AND FAIL                    *)
(* -------------------------------------------------- *)

let OK'   v = TL_err (OK   v)(*:@norender:*)
let FAIL' e = TL_err (FAIL e)(*:@norender:*)

(*
val _ = overload_on("FAIL", ``FAIL'``);
*)

let OK'_int     v = OK' (TL_int v) (*:@norender:*)
let OK'_bool    v = OK' (TL_bool v) (*:@norender:*)
let OK'_string  v = OK' (TL_string v) (*:@norender:*)
let OK'_one     v = OK' (TL_one v) (*:@norender:*)
let OK'_pair    v = OK' (TL_pair v) (*:@norender:*)
let OK'_list    v = OK' (TL_list v) (*:@norender:*)
let OK'_option  v = OK' (TL_option v) (*:@norender:*)
let OK'_err     v = OK' (TL_err v) (*:@norender:*)
let OK'_fd      v = OK' (TL_fd v) (*:@norender:*)
let OK'_ip      v = OK' (TL_ip v) (*:@norender:*)
let OK'_port    v = OK' (TL_port v) (*:@norender:*)
let OK'_error   v = OK' (TL_error v) (*:@norender:*)
let OK'_tid     v = OK' (TL_tid v) (*:@norender:*)
let OK'_netmask v = OK' (TL_netmask v) (*:@norender:*)
let OK'_ifid    v = OK' (TL_ifid v) (*:@norender:*)

let OK'_fileflags v = OK' (TL_list (MAP TL_filebflag v))
(*:@norender:*)
let OK'_sockbflag v = OK' (TL_sockbflag v)
(*:@norender:*)
let OK'_socknflag v = OK' (TL_socknflag v)
(*:@norender:*)
let OK'_socktflag v = OK' (TL_socktflag v)
(*:@norender:*)
let OPTION_MAP f x = match x with Nothing -> Nothing | Just x -> Just (f x) end
let OK'_int_option v = OK' (TL_option (OPTION_MAP TL_int v))
(*:@norender:*)
let OK'_intpair_option v = OK' (TL_option
                                (OPTION_MAP (fun (x,y) -> TL_pair (TL_int x,
                                                               TL_int y)) v))

(*:@norender:*)
let OK'_string_ipportpair_pair (s,ipo) =
    OK'_pair (TL_string s,
	      TL_option
                (OPTION_MAP
                   (fun ((i,p),b) ->
                      TL_pair(TL_pair(TL_option (OPTION_MAP TL_ip i),
				      TL_option (OPTION_MAP TL_port p)),
                              TL_bool b)) ipo))
(*:@norender:*)
let OK'_ipport (i1,p1) = OK'_pair (TL_ip i1, TL_port p1)
(*:@norender:*)
let OK'_ipportlift (is1,ps1) =
             OK'_pair (TL_option (OPTION_MAP TL_ip is1),
                       TL_option (OPTION_MAP TL_port ps1))
(*:@norender:*)
let OK'_fdipport (fd,(i2,p2)) =
             OK' (TL_pair (TL_fd fd,
                           TL_pair (TL_ip i2,
                                    TL_port p2)))
(*:@norender:*)
let OK'_errorlift e = OK'_option (OPTION_MAP TL_error e)
(*:@norender:*)
(*
val OK'_msglift_def =
  Define `OK'_msglift (i1,ps1,data) =
             TL_err (OK(TL_pair(TL_ip i1,
                                TL_pair(TL_option (OPTION_MAP TL_port ps1),
                                        TL_string data))))`(*:@norender:*);
*)
let OK'_fdlisttriple (fdl1, fdl2, fdl3) =
             TL_err (OK(TL_pair(TL_list (MAP TL_fd fdl1),
                                TL_pair(TL_list (MAP TL_fd fdl2),
                                        TL_list (MAP TL_fd fdl3)))))(*:@norender:*)
let OK'_getifaddrs_ret retlist =
        TL_err (OK(TL_list
                     (MAP (fun (ifid, i, ipl, nm) ->
                               TL_pair(TL_ifid ifid,
                                       TL_pair(TL_ip i,
                                               TL_pair(TL_list (MAP TL_ip ipl),
                                                       TL_netmask nm))))
                          retlist)))(*:@norender:*)
(*
val _ = overload_on("OK", ``OK'_int``);
val _ = overload_on("OK", ``OK'_bool``);
val _ = overload_on("OK", ``OK'_string``);
val _ = overload_on("OK", ``OK'_one``);
val _ = overload_on("OK", ``OK'_pair``);
val _ = overload_on("OK", ``OK'_list``);
val _ = overload_on("OK", ``OK'_option``);
val _ = overload_on("OK", ``OK'_err``);
val _ = overload_on("OK", ``OK'_fd``);
val _ = overload_on("OK", ``OK'_ip``);
val _ = overload_on("OK", ``OK'_port``);
val _ = overload_on("OK", ``OK'_error``);
val _ = overload_on("OK", ``OK'_netmask``);
val _ = overload_on("OK", ``OK'_ifid``);
val _ = overload_on("OK", ``OK'_fileflags``);
val _ = overload_on("OK", ``OK'_sockbflag``);
val _ = overload_on("OK", ``OK'_socknflag``);
val _ = overload_on("OK", ``OK'_socktflag``);
val _ = overload_on("OK", ``OK'_tid``);
val _ = overload_on("OK", ``OK'_int_option``);
val _ = overload_on("OK", ``OK'_intpair_option``);

val _ = overload_on("OK", ``OK'_string_ipportpair_pair``);

val _ = overload_on("OK", ``OK'_ipport``);
val _ = overload_on("OK", ``OK'_ipportlift``);
val _ = overload_on("OK", ``OK'_fdipport``);
val _ = overload_on("OK", ``OK'_errorlift``);
(*
val _ = overload_on("OK", ``OK'_msglift``);
*)
val _ = overload_on("OK", ``OK'_fdlisttriple``);
val _ = overload_on("OK", ``OK'_getifaddrs_ret``);
*)

(* -------------------------------------------------- *)
(*                        TIME                        *)
(* -------------------------------------------------- *)

(*: @section [[base_time]] GEN Time types

Time and duration are defined as type synonyms.  Time must be
non-negative and may be infinite; duration must be positive and
finite.

:*)


type time = time_infty | time of real

type duration = real

let time_lt x y = match (x,y) with
 (*: written [[<]] :*)
 | ((time x), (time y)) -> (real_lt x y)
 | (time_infty,     ys) -> false
 | (xs,        time_infty) -> true 
end
(*: @mergewithnext :*) 

let time_lte x y = match (x,y) with
 (*: written [[<=]] :*)
  | ( (time x), (time y)) -> (real_lte x y)
  | ( t, time_infty) -> true
  | ( time_infty, t) -> (t = time_infty)
end
(*: @mergewithnext :*) 
let 
 (*: written [[>]] :*)
  time_gt  xs ys = time_lt ys xs
(*: @mergewithnext :*) 
let 
 (*: written [[>=]] :*)
  time_gte xs ys = time_lte ys xs

(* FIXME
val _ = overload_on("<" , ``time_lt`` );
val _ = overload_on("<=", ``time_lte``);
val _ = overload_on(">" , ``time_gt`` );
val _ = overload_on(">=", ``time_gte``);
*)

let time_min x y = match (x,y) with
 (*: written [[MIN x y]] :*)
  | ( (time x), (time y) ) -> time (MIN x y) 
  | ( (time x), time_infty ) -> time x 
  | ( time_infty, (time x) ) -> time x 
  | ( time_infty, time_infty ) -> time_infty
end
(*: @mergewithnext :*) 

let time_MIN = time_min

let time_max x y = match (x,y) with
 (*: written [[MAX x y]] :*)
  | ( (time x), (time y) ) -> time (MAX x y) 
  | ( time_infty, (time x) ) -> time_infty 
  | ( (time x), time_infty ) -> time_infty 
  | ( time_infty, time_infty ) -> time_infty
end
(*: @mergewithnext :*) 

let time_MAX = time_max

(* FIXME
val _ = overload_on("MIN", ``time_min``);
val _ = overload_on("MAX", ``time_max``);
*)

(* adding a duration to a time *)
let time_plus_dur t d = match (t,d) with
 (*: written [[+]] :*)
  | ((time x), y) -> time (real_plus x y)
  | (time_infty,    y) -> time_infty
end
(*: @mergewithnext :*)
(*
val _ = overload_on("+", ``time_plus_dur``) handle e => Raise e;
*)


(* subtracting a duration from a time *)
let time_minus_dur t d = match (t,d) with
 (*: written [[-]] :*)
 | ((time x),      y) -> time (real_minus x y) 
 | (time_infty,    y) -> time_infty
end
(*: @mergewithnext :*)
(*
val _ = overload_on("-", ``time_minus_dur``);
*)

(* scalar premultiplication of a time by a real *)
let real_mult_time r t = match (r,t) with 
 (*: written [[*]] :*)
  | (x,  (time y)) -> time (real_times x y) 
  | (x, time_infty) -> time_infty
end
(*
val _ = overload_on("*", ``real_mult_time``) handle e => Raise e;
*)

val FIXME_time: time

instance (Numeral time)
  let fromNumeral x = FIXME_time
end

let time_mult_time t1 t2 = FIXME_time

instance (NumMult time)
  let ( * ) = time_mult_time
end

let time_zero = time real_zero


(* construct a duration from two naturals *)
let duration (* (duration : num -> num -> duration) *) sec usec = real_plus (real_of_num sec) (real_div (real_of_num usec) 1000000)

(*: @description
Some durations may be represented as [[duration sec usec]], where [[sec]]
and [[usec]] are both natural numbers.
:*)


(* absolute time - constructed from two naturals, time since the epoch *)
let abstime (* (abstime : num -> num -> duration) *) sec usec =  real_plus (real_of_num sec) (real_div (real_of_num usec) 1000000)

(*: @description
Some times may be represented as [[duration sec usec]], where [[sec]]
and [[usec]] are both natural numbers.
:*)


(* destructor - to option *)
let realopt_of_time t = match t with 
  | (time x) -> SOME x 
  | time_infty -> NONE
end
(*: @mergewithnext :*)

(* destructor - to real; unspecified on time_infty *)
let the_time x = match x with 
  (*: written [[THE]] :*)
| (time x) -> x
end
(*
val _ = overload_on("THE", ``the_time``);
*)
let time_THE = the_time

(*: @section [[base_net]] TCP Basic network types: sequence numbers

We have several flavours of TCP sequence numbers, all represented by
32-bit values: local sequence numbers, foreign sequence numbers, and
timestamps.  This helps prevent confusion.  We also define
[[tcp_seq_flip_sense]], which converts a local to a foreign sequence
number and vice versa.

:*)

(* -------------------------------------------------- *)
(*                       BYTES                        *)
(* -------------------------------------------------- *)

type byte = char


(* -------------------------------------------------- *)
(*               SEQUENCE NUMBERS                     *)
(* -------------------------------------------------- *)

(* Sequence numbers are 32-bit quantities
   with special wraparound comparison operators *)

(*
local open integer_word32Theory (* for w2i and i2w functions *) in end;
*)

type seq32 'a = SEQ32 of 'a * word32

(*: @description
32-bit wraparound sequence numbers, as used in TCP, along with their special arithmetic.
:*)


(* Arithmetic: adding or subtracting a natural or integer *)

let 
 (*: written [[+]] :*)
  seq32_plus   (SEQ32 a n) (m:nat) = SEQ32 a (w_plus n (n2w m))
(*: @mergewithnext :*)


let 
 (*: written [[-]] :*)
  seq32_minus  (SEQ32 a n) (m:nat) = SEQ32 a (w_minus n (n2w m))
(*: @mergewithnext :*)

let 
 (*: written [[+]] :*)
  seq32_plus'  (SEQ32 a n) (m:int) = SEQ32 a (w_plus n (i2w m))
(*: @mergewithnext :*)

let 
 (*: written [[-]] :*)
  seq32_minus' (SEQ32 a n) (m:int) = SEQ32 a (w_minus n (i2w m))
(*: @mergewithnext :*)

(* FIXME
val _ = overload_on("+", ``seq32_plus``  );
val _ = overload_on("-", ``seq32_minus`` );
val _ = overload_on("+", ``seq32_plus'`` );
val _ = overload_on("-", ``seq32_minus'``);
*)

(* Difference: *)

let 
 (*: written [[-]] :*)
  seq32_diff (SEQ32 (a:'a) n) (SEQ32 (b:'a) m) = w2i (w_minus n m)
(*: @mergewithnext :*)

(*
val _ = overload_on("-", ``seq32_diff``);
*)

(* Comparison: code from BSD says:
     define  SEQ_LT(a,b)   ((int)((a)-(b)) < 0)
     define  SEQ_LEQ(a,b)  ((int)((a)-(b)) <= 0)
     define  SEQ_GT(a,b)   ((int)((a)-(b)) > 0)
     define  SEQ_GEQ(a,b)  ((int)((a)-(b)) >= 0)
*)

let 
 (*: written [[<]] :*)
  seq32_lt  (n:seq32 'a) (m:seq32 'a) = Basic_classes.(<) (( (seq32_diff n m) : int )) int_zero
(*: @mergewithnext :*)

let 
 (*: written [[<=]] :*)
  seq32_leq (n:seq32 'a) (m:seq32 'a) = Basic_classes.(<=) (( (seq32_diff n m) : int )) int_zero
(*: @mergewithnext :*)
let 
 (*: written [[>]] :*)
  seq32_gt  (n:seq32 'a) (m:seq32 'a) = Basic_classes.(>) (( (seq32_diff n m) : int )) int_zero
(*: @mergewithnext :*)
let 
 (*: written [[>=]] :*)
  seq32_geq (n:seq32 'a) (m:seq32 'a) = Basic_classes.(>=) (( (seq32_diff n m) : int )) int_zero
(*: @mergewithnext :*)
(* FIXME
val _ = overload_on("<" , ``seq32_lt`` );
val _ = overload_on("<=", ``seq32_leq``);
val _ = overload_on(">" , ``seq32_gt`` );
val _ = overload_on(">=", ``seq32_geq``);
*)


(* coercion *)
(*
val seq32_fromto_def = Phase.phase 1 Define`
  seq32_fromto (a:'a) b (SEQ32 (c:'a) n) = SEQ32 b n
`(*: @mergewithnext :*);
*)
(*
val seq32_coerce_def = Phase.phase 1 Define`
  seq32_coerce (SEQ32 a n) = SEQ32 ARB n
`(*: @mergewithnext :*);
*)

let 
 (*: written [[MIN x y]] :*)
  seq32_min (n:seq32 'a) (m:seq32 'a) = if seq32_lt n m then n else m
(*: @mergewithnext :*)
let 
 (*: written [[MAX x y]] :*)
  seq32_max (n:seq32 'a) (m:seq32 'a) = if seq32_lt n m then m else n

(* FIXME
val _ = overload_on("MIN", ``seq32_min``);
val _ = overload_on("MAX", ``seq32_max``);
*)

val FIXME_seq32 : forall 'a. seq32 'a

val seq32_MAX: forall 'a. seq32 'a -> seq32 'a -> seq32 'a

val FIXME_w2n: forall 'a. numeral -> seq32 'a

instance forall 'a. (Numeral (seq32 'a))
  let fromNumeral = FIXME_w2n
end



(* -------------------------------------------------- *)
(*      TCP SEQUENCE NUMBERS and TIMESTAMPS           *)
(* -------------------------------------------------- *)


(* TCP singleton types *)
type tcpLocal   = | TcpLocal  
type tcpForeign = | TcpForeign

(* TCP sequence number types *)
type tcp_seq_local = seq32 tcpLocal
type tcp_seq_foreign = seq32 tcpForeign

val FIXME_tcp_seq_local : tcp_seq_local

(* TCP constructors *)
let tcp_seq_local   (n:word32) = SEQ32 TcpLocal   n (*: @mergewithnext :*)
let tcp_seq_foreign (n:word32) = SEQ32 TcpForeign n (*: @mergewithnext :*)


(* TCP flip-sense overloaded operator *)
let tcp_seq_local_to_foreign x = match x with | SEQ32 TcpLocal n -> SEQ32 TcpForeign n end (*: @mergewithnext :*)
let tcp_seq_foreign_to_local x = match x with | SEQ32 TcpForeign n -> SEQ32 TcpLocal n end 
(* FIXME
val _ = overload_on("tcp_seq_flip_sense", ``tcp_seq_local_to_foreign``);
val _ = overload_on("tcp_seq_flip_sense", ``tcp_seq_foreign_to_local``);
*)

(* timestamps are treated identically with TCP sequence numbers,
   as wraparound unsigned 32-bit words *)
type tstamp = | Tstamp
type ts_seq = seq32 tstamp
let ts_seq (n:word32) = SEQ32 Tstamp n

(* -------------------------------------------------- *)
(*
val _ = export_theory();

*)