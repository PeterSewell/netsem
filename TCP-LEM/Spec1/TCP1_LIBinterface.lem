(*
(* A HOL98 specification of TCP *)

(* Type declarations and groups of system ("LIB") calls *)

(*[ RCSID "$Id: TCP1_LIBinterfaceScript.sml,v 1.37 2005/02/07 16:31:21 kw217 Exp $" ]*)

open HolKernel Parse boolLib

local open TCP1_baseTypesTheory in end

open bossLib

open HolDoc

val _ = new_theory "TCP1_LIBinterface";

val _ = Version.registerTheory "$RCSfile: TCP1_LIBinterfaceScript.sml,v $" "$Revision: 1.37 $" "$Date: 2005/02/07 16:31:21 $";
*)

open import Pervasives_extra
open TCP1_lemSupport
open TCP1_signals
open TCP1_baseTypes

(*: @chapter [[TCP1_LIBinterface]] System call types

This file gives the system call API that is modelled by the
specification.
:*)

(* Michael: is there a nicer way we can present this, so we can write
   something like "socket : one -> fd" etc and derive LIB_interface
   and retType from this? *)

(* why does Peter's OCaml use "ip lift", whereas Net_LIB used "ip option"? *)

(* based on interface.ml *)

(*: @section [[lib_interface]] ALL The interface

The Sockets API is modelled by the library interface below.  As
discussed in volume 1, we refine the C interface slightly:
\begin{itemize}

\item We use ML-style datatypes, abstracting from pointers and length
parameters.

\item Where the C API provides multiple entry points to a single
operation (such as |send|/|sendto|/|sendmsg|/|write|, or
|pselect|/|select|) we combine them all into a single general
function.

\item Certain special cases of general functions (such as |getsockopt|
with |SO_ERROR|, |ioctl| with |SIOCATMARK|, and |fcntl| with
|F_GETFL|) have been pulled out into separate functions
([[getsockerr]], [[sockatmark]] (following POSIX), and
[[getfileflags]] respectively).

\item Features not relevant to TCP or UDP (e.g. Unix domain sockets), or
historical artifacts (such as the address family / protocol family
distinction in |socket|) are elided.
\end{itemize}

The HOL type [[LIB_interface]] defines the calls. It
takes their arguments to be the relevant HOL types (rather than values
of [[TLang]]) so that HOL typechecking ensures consistency.  The return
types of the calls cannot be embedded so neatly within the HOL type
system, so an additional [[retType]] function defines these (and HOL
typechecking does not check this data at present).

:*)

type 
    LIB_interface =
        accept       of fd
      | bind         of (fd * maybe ip * maybe port)
      | close        of fd
      | connect      of (fd * ip * maybe port)
      | disconnect   of fd
      | dup          of fd
      | dupfd        of (fd * int)
      | getfileflags of fd
      | getifaddrs   of one
      | getpeername  of fd
      | getsockbopt  of (fd * sockbflag)
      | getsockerr   of fd
      | getsocklistening of fd
      | getsockname  of fd
      | getsocknopt  of (fd * socknflag)
      | getsocktopt  of (fd * socktflag)
      | listen       of (fd * int)
      | pselect      of (list fd * list fd * list fd * maybe (int * int) * maybe (list signal))
      | recv         of (fd * int * list msgbflag)
      | send         of (fd * maybe (ip * port) * string * list msgbflag)
      | setfileflags of (fd * list filebflag)
      | setsockbopt  of (fd * sockbflag * bool)
      | setsocknopt  of (fd * socknflag * int)
      | setsocktopt  of (fd * socktflag * maybe (int * int))
      | shutdown     of (fd * bool * bool)
      | sockatmark   of fd
      | socket       of socktype

(*: @description
Sockets calls with their argument types.
:*)






(*
      (* and now the non-POSIX stuff: *)
      | port_of_int         of int
      | int_of_port         of port
      | ip_of_string        of string
      | string_of_ip        of ip
      | int_of_fd           of fd
   (* NB: fd_of_int is deliberately omitted; see dupfd *)
   (* | create              of ('a -> 'b * 'a)   *)
      | delay               of int
      | print_ef            of string
      | exit                of one

   (* | getaddrinfo of ????                  *)
   (* | poll        of (fd * event) list ??? *)
*)

let retType x = (match x with
      | (accept      _) -> TLty_pair(TLty_fd,TLty_pair(TLty_ip, TLty_port))
      | (bind        _) -> TLty_one
      | (close       _) -> TLty_one
      | (connect     _) -> TLty_one
      | (disconnect  _) -> TLty_one
      | (dup         _) -> TLty_fd
      | (dupfd       _) -> TLty_fd
      | (getfileflags _) -> TLty_list TLty_filebflag
      | (getifaddrs          _) -> TLty_list
             (TLty_pair(TLty_ifid,TLty_pair(TLty_ip,TLty_pair((TLty_list TLty_ip),TLty_netmask))))
      | (getpeername _) -> TLty_pair(TLty_ip, TLty_port)
      | (getsockbopt _) -> TLty_bool
      | (getsockerr  _) -> TLty_one
      | (getsocklistening _) -> TLty_bool
      | (getsockname _) -> TLty_pair(TLty_lift TLty_ip, TLty_lift TLty_port)
      | (getsocknopt _) -> TLty_int
      | (getsocktopt _) -> TLty_lift (TLty_pair(TLty_int,TLty_int))
      | (listen      _) -> TLty_one
      | (pselect     _) -> TLty_pair(TLty_list TLty_fd,
                                             TLty_pair(TLty_list TLty_fd,
                                                       TLty_list TLty_fd))
      | (recv        _) -> TLty_pair (TLty_string,
                                              TLty_lift(TLty_pair(TLty_pair(TLty_ip,
									    TLty_port),
								  TLty_bool)))
      | (send        _) -> TLty_string
      | (setfileflags _) -> TLty_one
      | (setsockbopt _) -> TLty_one
      | (setsocknopt _) -> TLty_one
      | (setsocktopt _) -> TLty_one
      | (shutdown    _) -> TLty_one
      | (sockatmark  _) -> TLty_bool
      | (socket      _) -> TLty_fd
end)

(*: @description
Return types of sockets calls.
:*)




(*

(*    /\ retType (getaddrinfo _) = TLty_???? *)
(*    /\ retType (poll        _) = TLty_???? *)

    (* and now the non-POSIX stuff: *)
      /\ retType (port_of_int         _) = TLty_err TLty_port
      /\ retType (int_of_port         _) = TLty_int
      /\ retType (ip_of_string        _) = TLty_err TLty_ip
      /\ retType (string_of_ip        _) = TLty_string
      /\ retType (int_of_fd           _) = TLty_int
(*    /\ retType (create              _) = TLty_tid                           *)
      /\ retType (delay               _) = TLty_one
      /\ retType (print_ef            _) = TLty_err TLty_one
      /\ retType (exit                _) = TLty_void
*)


(*: @section [[lib_groups]] ALL Useful groups of calls
For some purposes it is useful to group together all the system calls
that expect a single [[fd]], and those that expect a socket [[fd]].
:*)

let 
  fd_op fd opn = (
    opn = accept(fd) ||    
((exists is ps. opn = bind(fd,is,ps)) ||    
(opn = close(fd) ||    
((exists i p. opn = connect(fd,i,p)) ||    
(opn = disconnect(fd) ||    
(opn = dup(fd) ||    
((exists fd'. opn = dupfd(fd,fd')) ||    
((opn = getfileflags(fd)) ||    
((exists flags. opn = setfileflags(fd,flags)) ||    
(opn = getsockname(fd) ||    
(opn = getpeername(fd) ||    
((exists sfb. opn = getsockbopt(fd,sfb)) ||    
((exists sfn. opn = getsocknopt(fd,sfn)) ||    
((exists sft. opn = getsocktopt(fd,sft)) ||    
((exists sfb b. opn = setsockbopt(fd,sfb,b)) ||    
((exists sfn n. opn = setsocknopt(fd,sfn,n)) ||    
((exists sft t. opn = setsocktopt(fd,sft,t)) ||    
((exists n. opn = listen(fd,n)) ||    
((exists n opt. opn = recv(fd,n,opt)) ||    
((exists data opt1 opt2. opn = send(fd,opt1,data,opt2)) ||    
((exists r w. opn = shutdown(fd,r,w)) ||    
(opn = sockatmark(fd) ||    
(opn = getsockerr(fd) ||    
(opn = getsocklistening(fd))))))))))))))))))))))))
)
(*: @description
Calls that expect a (single) fd.
:*)



   (* | getaddrinfo of ????                  *)
   (* | poll        of (fd,event) list ??? *)
    (* NOT pselect *)
    (* NOT socket *)
    (* NOT the non-POSIX ones *)

let 
  fd_sockop fd opn = (
    opn = accept(fd) ||    
((exists is ps. opn = bind(fd,is,ps)) ||    
((exists i p. opn = connect(fd,i,p)) ||    
(opn = disconnect(fd) ||    
(opn = getsockname(fd) ||    
(opn = getpeername(fd) ||    
((exists sfb. opn = getsockbopt(fd,sfb)) ||    
((exists sfn. opn = getsocknopt(fd,sfn)) ||    
((exists sft. opn = getsocktopt(fd,sft)) ||    
((exists sfb b. opn = setsockbopt(fd,sfb,b)) ||    
((exists sfn n. opn = setsocknopt(fd,sfn,n)) ||    
((exists sft t. opn = setsocktopt(fd,sft,t)) ||    
((exists n. opn = listen(fd,n)) ||    
((exists n opt. opn = recv(fd,n,opt)) ||    
((exists data opt1 opt2. opn = send(fd,opt1,data,opt2)) ||    
((exists r w. opn = shutdown(fd,r,w)) ||    
(opn = sockatmark(fd) ||    
(opn = getsockerr(fd) ||    
(opn = getsocklistening(fd)))))))))))))))))))
)
(*: @description
Calls that expect a (single) socket fd.
:*)



    (* NOT close *)
    (* NOT dup *)
    (* NOT dupfd *)
    (* NOT getfileflags *)
    (* NOT setfileflags *)
   (* | getaddrinfo of ????                  *)
   (* | poll        of (fd,event) list ??? *)
    (* NOT pselect *)
    (* NOT socket *)
    (* NOT the non-POSIX ones *)

(*
val _ = export_theory();
*)