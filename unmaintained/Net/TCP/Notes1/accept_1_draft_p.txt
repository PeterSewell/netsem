

metacomments flagged P:


P: we should try out a sample rule text on some systems guys when we
think we're happy with it

P: (prompted by smb's use of man) when we've written all the text we
should systematically diff with various man pages


(*:

  @section accept

P: this preamble should _not_ be specific to our spec?

P: should it be related to the POSIX text?

P: should we at least use language consistent with POSIX (or RFC, or
Stevens)?  eg {new completed connection, fresh connection, new
established socket} or whatever.

  [[accept(fd)]] returns the first connection from the completed
  connections queue of the (listening, TCP) socket referenced by file
  descriptor [[fd]].

  [[accept(fd)]] blocks if the completed connections queue is empty
  and the socket does not have the [[O_NONBLOCK]] flag set.

  @udp-specific Calling [[accept()]] on a UDP socket will fail; UDP
  is not a connection-oriented protocol.

  @errors [[ECONNABORTED]] [[EINVAL]] [[EAGAIN]] [[EINTR]] [[ENFILE]]
  [[EMFILE]] [[ENOBUFS]] [[ENOMEM]] [[EOPNOTSUPP]]

  All pending errors on the new connection are ignored by [[accept()]]
  except for [[ECONNABORTED]]. If the new connection has a pending
  [[ECONNABORTED]] error, [[accept()]] will fail returning the same
  error to the calling thread.


   #* DETAILS *#

P: want to say this here - maybe in a DETAILS section, so can preserve
spec-independence of the above.

  The blocked state is represented by the [[Accept2(sid)]] thread state.

P: it's useful to have a list of rule names and their one-line summaries
here.  Could be automatically extracted from the comments, perhaps
(and those be tuned up so they make more sense together, eg like the
below) or just written from scratch to avoid uber-perl. {Sh/c}ould include
also the rule categor{y,ies}.

  accept_1 {fast succeed, slow urgent succeed}    return connection, either immediately or from a blocked state
  accept_2 {block}                                block, waiting for connection
  accept_3 {fast fail}                            fail with EAGAIN - no connections, non-blocking semantics requested
  accept_5 {fast fail, slow urgent fail}          fail with ECONNABORTED - there is a pending ECONNABORTED error on a completed connection.  Returns either immediately or from a blocked state
  accept_6 {slow nonurgent fail}                  fail with EINTR - blocked system call interrupted by signal
  accept_7 {fast fail, slow urgent fail}          fail with EINVAL - socket not in LISTEN state
  accept_8 {fast badfail, slow nonurgent badfail} fail with ENFILE, ENOBUFS, or ENONMEM - out of resources
  accept_8a {fast fail, slow nonurgent fail}      fail with EMFILE - out of file descriptors
  accept_9 {fast fail}                            fail with EOPNOTSUPP - accept() called on UDP socket


P: want to give a hint as to what to look at first:

  Common cases:  accept_1; return_1  and  accept_2; deliver_in_1; accept_1; return_1


P: maybe we want to explain here how our interface compares with the
BSD/Linux/WXP interface, eg

Linux:   int accept(int   s,  struct  sockaddr  *addr,  socklen_t  *addrlen);

where s corresponds to the spec fd, ...


P: the linux man page has other errors, eg EFAULT....




:*)

(!h lbl rc ts t files socks tid d fds fds'
  fd fid ff sid sf is1 i1' p1 i2 p2 es cb cb'
  q fd' fid' sid' sf' es' lis sndq rcvq
  cantsndmore cantrcvmore sndurp rcvurp iobc.


P: added annotation from TCP, UDP, TCP/UDP to the rule.  Maybe also
add to the "accept block" of rules, not sure.


  accept_1 /* rc TCP (*: normal case :*) */
    h with <| ts := FUPDATE ts (tid,Timed(t,d));
              fds := fds;
              files := files;
              socks :=
                socks FUPDATE_LIST
                  [(sid ,Sock(SOME fid,sf,is1,SOME p1,NONE,NONE,es,F,F,
                              TCP_Sock(LISTEN,cb,SOME (lis with <| q := sid' :: q |>),
                                       [],NONE,[],NONE,NO_OOBDATA)));
                   (sid',Sock(NONE,sf',SOME i1',SOME p1,SOME i2,SOME p2,es',
	            cantsndmore,cantrcvmore,TCP_Sock(ESTABLISHED,cb',NONE,
                                                     sndq,sndurp,rcvq,rcvurp,iobc)))] |>
  -- lbl -->
    h with <| ts := FUPDATE ts (tid,Timed(Ret (OK (fd',(i2,p2))),sched_timer));
              fds := fds';
              files := files FUPDATE_LIST [(fid',File(FT_Socket(sid'),ff_default))];
              socks :=
	        socks FUPDATE_LIST
                  [(sid ,Sock(SOME fid,sf,is1,SOME p1,NONE,NONE,es,F,F,
			      TCP_Sock(LISTEN,cb,SOME (lis with <| q := q |>),
				       [],NONE,[],NONE,NO_OOBDATA)));
                   (sid',Sock(SOME fid',sf',SOME i1',SOME p1,SOME i2,SOME p2,es',
		    cantsndmore,cantrcvmore,TCP_Sock(ESTABLISHED,cb',NONE,
                                                     sndq,sndurp,rcvq,rcvurp,iobc)))] |>

   <==

    $\/
    (t = Run /\ (*: Non-blocking case :*)
     lbl = Lh_call (tid,(accept fd)) /\
     rc = fast succeed /\
     fid = fds ' fd  /\
     fd IN FDOM fds /\
     FAPPLY files fid = File(FT_Socket(sid),ff)
    )
    (t = Accept2(sid) /\ (*: Return from blocking call :*)
     lbl = Lh_tau /\
     rc = slow urgent succeed
     ) /\
    sid <> sid' /\ (* redundant? *)
    es' <> SOME ECONNABORTED /\
    fid' NOTIN ((FDOM files) UNION {fid}) /\
    nextfd h.arch fds fd' /\
    fds' = fds |+ (fd', fid') /\
    (!i1. SOME i1 = is1 ==> i1 = i1')


   (*:

   #* DESCRIPTION *#

P: want this to be (almost entirely) readable without looking at the
spec, and also for it to be a guide as to how one should read the rule
(hence it includes variable names).  The first sentence or two should
say the main thing(s) that this rule does.  All the clauses of the
spec (including things expressed by pattern matching) should be
covered by _some_ text.

   Given a listening socket [[sid]], and a socket [[sid']] at the
   front of its completed connections queue,
   create a new file descriptor [[fd']] pointing to a new file ID [[fid']],
   which has the file description [[File(FT_Socket(sid'),ff_default)]].
   Return [[fd']] to the calling thread [[tid]].

   This rule covers two cases: (1) where the completed connection
   queue is non-empty when [[accept(fd)]] is called, with label
   [[Lh_call (tid,(accept fd))]], and (2) where a previous call to
   [[accept(fd)]] blocked but a new connection is now available, with
   label [[Lh_tau]].

   In (1) the [[sid]] is obtained by looking up the file ID [[fid]]
   pointed to by the file descriptor [[fd]] and then looking for the
   [[File(FT_Socket(sid),ff)]] of that file ID.  In (2) the [[sid]] is
   obtained from the blocked thread state [[Accept2(sid)]].

P: this looking-up stuff is going to recur many times - think should
repeat in each rule as required, but use consistent language.

   If the listening socket [[sid]] has a local IP address set ([[SOME
   i1]]) then it must be the same as the local IP address of the new
   connection.

P: guess this is always true in reachable states?  What if not?

   The new file descriptor [[fd']] is created in an
   architecture-specific way, using the auxiliary [[nextfd]].

   Any pending errors [[es']] on the connected socket [[sid']] are ignored
   except for [[ECONNABORTED]], which is dealt with by [[accept_5]].


   #* DETAILS *#



   #* VARIATIONS *#

...talk about how [[nextfd]] behaves here...

   @FreeBSD None

   @Linux None

   @WinXP None

   @Posix None

   @Other None

   #* INTERNAL *#

   If the queue of completed connections is non-empty and the user
   either calls [[accept()]] or has already made a blocking call to
   [[accept()]] (and is therefore now in state [[Accept2]]), then a
   new open file description is allocated for the socket, and a new
   file descriptor made to point to the open file description.
   Pending errors are ignored, except for [[ECONNABORTED]], of the
   provenance of which the present writer is uncertain (see
   [[accept_5]]).

   This rule is a combination of (the old) [[accept_1]] and
   [[accept_1a]].  DISCUSSION POINT: is it clear?

   Notice that we require that the source ip and port are the same for
   the listening socket and the accepted socket.  I can't see this in
   POSIX; needs to be checked with BSD and/or Linux.

   POSIX: "shall extract...".
   POSIX: "until a connection is present...".

   slow version SHOULD BE URGENT.

   Michael points out that we should check if we actually can allocate
   a fresh fd.

   :*)
   )
