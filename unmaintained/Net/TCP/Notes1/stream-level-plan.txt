Sat Aug 20 16:56:47 BST 2005

Michael, Peter, musing about stream-level.   Don't think anything is
going to be controversial (guess this is consistent with Tom's mail,
though I haven't actually checked. ahem.)

Seems like good places for Adam to start are 0,1,5,2. Enjoy!


0) define _networks_ again (find the old UDP definition and hack it about)
   Both segment-level (with TCP segments) and stream-level (with gizmos)

1) write (in HOL) a predicate on well-behaved segment-level networks.
   The interesting part will be specific to two (or one - loopback!)
   hosts, their sockets that refer to each, and the relevant segments
   on the wire.  It will say things like "there aren't SYNs at two
   distinct points in sequence number space".

2) write the stream-level spec, along the lines that Tom started:

    - with a "stream gizmo" and multiway synchronisation
      (thread-host and host-gizmo simultaneously)
      (by the way, use pairs and pass in fst and snd instead of that
      functions-from-{One,Two} stuff)

    - assume the network is well-behaved, ie can only be in states
      that are reachable by doing socket calls on each host, without
      packet forgery.  (1) should give a good approximation to that set
      of states.

    - still allow duplication, reordering, and loss (though only total
      loss should be observable).  Maybe parameterise spec by a knob
      that, when set, guarantees that total loss is _not_ happening.
      (Much client-code reasoning might depend on that assumption).

    - don't try to make the spec detailed enough to characterise any
      timing guarantees (for now)

    - do consider observability by other hosts (eg trying to make
      further connections).  Do consider loopback connections.

    - either disallow urgent data or (better?) be very
      nondeterministic as soon as anyone tries to use it.

    - keep all the UDP part of the spec (so keep the host iq and oq
      for that (!), though don't put any TCP segments in them
      (obviously, and TCP segments don't exist)

    - do consider the ICMPs that can be generated by reasonable hosts
      and by routers in the real network

    - consider connections between arbitrary pairs of OSs, not just
      pairs of the same OS

3) write an abstraction relation, between low-level _networks_ and
   high-level _networks_.  Only expect this to hold for well-behaved
   segment-level networks.

4) state our abstraction conjecture - basically a bisimulation-like
   thing, you know. Something like:

      A                      A --l--> A'
      |                               |
      |R              =>              |R
      |                               |
      C --l--> C'                     C'

   (and vice versa) for l amongst the Socket API labels, and

      A                      A
      |                      |
      |R              =>     |R
      |                      |
      C --l--> C'            C'

   for the wire interface labels

5) get the test infrastructure to produce double-ended traces, with
   all the labels in.  In fact, get it to produce N-ended
   multi-connection traces for arbitrary (smallish) N and M (ie,
   _network_ traces), so we can do loopback and also use a third host
   to initiate probe connections.

   (on the way, make all that stuff more cleanly packaged and turnkey
   than it is now)

6) write one test.  Send the resulting trace to Michael.

7) jazz up the checking infrastructure appropriately. Make that more
   clean and turnkey too.  Buy more machines.

8) think hard about test generation and write lots of tests.  Tests
   will generally have to be longer than they were in the original
   setup as we won't observe discrepencies between model and reality
   so directly.

   For BSD we plan to check against the stream-level spec, the
   segment-level spec, the well-formedness condition, and the
   abstraction.

   For other OSs we (probably) will only check against the
   stream-level spec and the well-formedness condition, unless we have
   the will to fix up the segment-level spec for the other OSs.




