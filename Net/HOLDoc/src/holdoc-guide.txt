HOLDoc -- Typesetting for HOL and LaTeX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Keith Wansbrough <kw217@cl.cam.ac.uk>
  http://www.cl.cam.ac.uk/users/kw217/
  Cambridge University Computer Laboratory

  July, 2001 -- June, 2003.


Contents
~~~~~~~~

- Makefile magic
- Syntax
- Directives
- Known bugs
- Wish list


Makefile magic
~~~~~~~~~~~~~~

There is a model Makefile in the examples/ directory.  It arranges
things so that

 - for HOL source to be processed by LTS, %Script.tex will
   automatically be built from %Script.sml.

 - for LaTeX source with embedded HOL to be processed by MNG,
   %.tex will automatically be built from %.mng.

 - %.dvi will be built from %.tex, and %.ps from %.dvi.

Also, munging errors will be written into the corresponding .errs
file, as well as being displayed on the console.

BE VERY CAREFUL TO LOOK AT THE ERRORS, because make won't
automatically detect them :-(.




Syntax
~~~~~~

There are two parsing modes, HOL and TeX.  You can switch between
them.  mng_to_latex starts in TeX mode, and lts_to_latex starts in HOL
mode.

In HOL mode, the parser parses identifiers,
newlines-with-indentation-following, white space, ordinary comments (*
stuff *), strings "string" (with no escapes, so you can't have a
double quote inside), HOLDoc directives (*[ DIRECTIVE arg arg arg ]*),
separators "~()[]{}.,", backticks, double backticks, and embedded TeX
(*: this\footnote{is embedded \TeX{} $e=mc^2$.}? :*).

In TeX mode, the parser parses HOLDoc directives (*[ DIRECTIVE arg arg
arg ]*) (which cannot be commented out by a TeX comment), embedded HOL
outside math mode [[this.is.HOL]], embedded HOL in math mode $
<[this.is.HOL]> \text{but this is not} $, and of course ordinary TeX
source.  There is an alternative syntax for directives: %(*[ DIRECTIVE
arg arg arg ]*), which is safer because it will be ignored by LaTeX if
it directly processes the file.


In HOL, there are multiple classes of identifier and symbol, each of
which may be typeset differently.  Typesetting is specified in
ltsmunge.sty, and the actual translation is specified mostly in the
relevant .imn file, although some is hardwired.  An unrecognised
identifier will be typeset in red, and its name will be printed to
stderr (with the model Makefile, this ends up in foo.errs).


Directives
~~~~~~~~~~

Unrecognised directives are ignored, so a directive can be commented
out by adding a "C" in front of it, and comments can be written as (*[
C this is a comment ]*) in Fortran style.  Directives are *completely
elided* from the output, so particularly, newlines inside directives
do not appear in the output.

If you want to specify a whole pile of directives at the top of a
file, you might rather put it in a .imn (include munge) file and cat
it onto the front of the file you are munging.  Blank lines are legal
syntax in TeX, so that's fine; they're also legal in SML.  The model
Makefile uses this trick.

The first directive is built into holdoc_munge.ml.

(*[ VARS x y z ]*) adds the named variables to the list of identifiers
that will be typeset as variables with \tsvar{} (rather than unknown
with \tsunknown{}).  Scope in LTS mode is the entire current rule, and
the directive is only processed when it occurs in the list of vars
after a binder such as !.  Scope in MNG is the rest of the source
file.

The rest of the directives are defined in holdoc_init.ml.

(*[ CLASS_LIST class id id id ]*) adds the named identifiers to the
list of identifiers for the named class.

(*[ CLASS class "\texcommand" ]*) defines a new class of identifier,
and provides the command that will be used to render identifiers in
this class.  For the above example, the identifier x will be rendered
as \texcommand{x}.


For historical reasons, the following classes are predefined, and have
equivalent special syntax.

  (*[ TYPE_LIST id id id ]*) adds the named identifiers to the list of
  "type" identifiers, typeset with \tstype{}.  Class: TYPE.

  (*[ CON_LIST id id id ]*) adds the named identifiers to the list of
  "constructor" identifiers, typeset with \tscon{}. [small caps]
  Class: CON.

  (*[ FIELD_LIST id id id ]*) adds the named identifiers to the list
  of "field" identifiers, which are treated exactly the same as
  variable names, because field names are usually the default variable
  name for that field.  This is slightly magic.  Class: FIELD.

  (*[ LIB_LIST id id id ]*) adds the named identifiers to the list of
  "library call" identifiers, typeset with \tslib{}. [charter] Class:
  LIB.

  (*[ AUX_LIST id id id ]*) adds the named identifiers to the list of
  "auxiliary function" identifiers, typeset with \tsaux{}. [roman]
  Class: AUX.

  (*[ AUX_INFIX_LIST id id id ]*) adds the named identifiers to the
  list of "infix auxiliary function" identifiers, typeset with
  \tsauxinfix{}. [roman, spacing] Class: AUX_INFIX.

  (*[ HOL_OP_LIST id id id ]*) adds the named identifiers to the list
  of "HOL operators", typeset with \tsholop{}.  [bold lowercase]
  Class: HOL_OP.


(*[ AUTO_BINDERS ]*) turns on automatic detection of variables, from
lists of variables after a binder such as !.  This is on by default.

(*[ NOAUTO_BINDERS ]*) turns it off.

(*[ VAR_PREFIX_LIST id id id ]*) adds the named identifiers to the
list of variable prefixes; identifiers with these names, possibly with
appended numbers, primes, or underscore-followed-by-variable, will be
typeset with \tsvar{}.  [italic]

(*[ VAR_PREFIX_ALIST id "str" id "str" ]*) adds the named identifiers
to the list of variable prefixes; identifiers with these names,
possibly with appended numbers, primes, or
underscore-followed-by-variable will be typeset by the given TeX
strings.



(*[ HOL_SYM_ALIST ++ "\TeXery" ==> "\more\texery" ]*) adds the named
symbols to the list of "HOL symbols", which are typeset with the
specified TeX, literally.  Since HOL strings have no escapes, you
don't need to escape the backslash, but you can't write a double
quote.

(*[ HOL_SYM_BOL_ALIST ++ "\TeXery" ==> "\more\texery" ]*) is the same
as the above, but applies only to the first non-space token on the
line (Beginning Of Line), overriding HOL_SYM_ALIST in that case.

(*[ HOL_IOPEN_LIST id id id ++ ++ ]*)
(*[ HOL_ICLOSE_LIST id id id ++ ++ ]*) define the given
identifiers/symbols as opening and closing an indent region; that is,
they introduce an indent.  This needs fancy TeX support also.  TODO:
complete this documentation.

(*[ HOL_ID_ALIST id "\TeXery" id "\more\texery" ]*) adds the named
identifiers to the list of "HOL identifiers", which are typeset with
the specified TeX, literally.  Since HOL strings have no escapes, you
don't need to escape the backslash, but you can't write a double
quote.

Note that in TeX, you should usually append a space, thus:

   (*[ HOL_SYM_ALIST --> "\longrightarrow " ]*)

in case the next character is not a backslash or other delimiter!

(*[ HOL_CURRIED_ALIST id "\TeXery" 2 true false id "\moreTexery" 3 false false ]*)
adds the named identifiers to the list of "curried HOL identifier",
which have the specified number of arguments, which are passed to the
specified TeX command.  If the first flag is true, commas within an argument
are converted to "}{", but the extra TeX args introduced this way do
not count towards the number specified in this directive.  An argument
is a (possibly qualified using dot notation) id, or a balanced-paren
subsequence.  If the first flag is true, the outer parentheses are stripped
if present.  If the second flag is true, multiple-line arguments are
permitted; if it is false, they are not.  The TeX command must be able
to handle linebreaks in its argument.  The second flag is *optional*
and defaults to false.

If the arity is set to 99, the curried identifier is effectively
disabled.  This can be useful when you want to turn off a curried
identifier in a particular mode.


In the above, you will sometimes want to define symbols that include
nonaggregating characters (i.e., characters in the string
"()[]{}~.,;").  By default, this will give an error message.  But you
can teach the parser about such symbols as follows:

(*[ SPECIAL ";;" "\;" ]*) defines ;; and \; as HOL identifiers from
now on.  Zero or more strings may be listed.


The last few are a bit different.

(*[ ECHO ]*) turns on echo mode *after the next token* (including
white space).

(*[ NOECHO ]*) turns off echo mode immediately.

These two are generally used around a .imn file, and avoid generating
extra blank lines around the file.  Unfortunately at the moment, the
last blank line in the file will unavoidably generate a blank line in
the output.

Note that ECHO / NOECHO are only respected in MNG mode.


(*[ RCSID "$Id$" ]*) records the given string as the RCS ID for the
file.  lts_to_latex uses this to define the command \rulesrcsid, which
can be useful to identify the version of munged rules.


(*[ INDENT ]*) turns on indent mode (this is on by default).  This
means that indentation (white space) at the beginning of a line will
be turned into some number of \quads, according to an appropriate
formula, and newlines will be marked by TeX `\\'.  This takes effect
immediately.

(*[ NOINDENT ]*) turns indent mode off.  Indentation (white space at
the beginning of a line) is ignored.  This takes effect immediately.


(*[ SMART_PREFIX ]*) turns on smart_prefix mode (this is on by
default).  This means that any variable consisting of alpha followed
by digits and/or apostrophes will be appropriately TeXified, with the
digits in a subscript and the apostrophes rendered as primes.

(*[ NO_SMART_PREFIX ]*) turns off smart_prefix mode.  This means that
only variables specified in VAR_PREFIX_LIST are so treated (and
library identifiers).


(*[ HOLDELIM "$" "$" ]*) redefines the strings substituted for the
enter-HOL-mode and exit-HOL-mode directives, [[ and ]].  These are
normally just "$" and "$", but can be changed, e.g., to colourise the
output of HOL strings.

(*[ HOLDELIMUNBAL ]*) / (*[ NOHOLDELIMUNBAL ]*) allows [[ to be closed
by ]> and vice versa; this is sometimes useful when mixing mng and
texmath modes.


(*[ RULES ]*) turns on rules mode (this is on by default for
lts_to_latex, and off by default otherwise).  This means that
identifiers ending in numbers will be treated as \tsrule{} rather than
\tsvar{}.

(*[ NORULES ]*) turns off rules mode.


(*[ COMMENTS ]*) turns on comments mode (this is on by default).  This
means that, within an lts_to_latex rule, non-TeX comments (* foo *)
will be displayed.  (TeX comments (*: foo :*) are unaffected).

(*[ NOCOMMENTS ]*) turns off comments mode.


HOLDoc supports "modes".  All the various lists defined above, and
also [NO]INDENT, [NO_]SMART_PREFIX, and [NO]RULES are not global; they
apply to the current mode.  The default mode is called "0".  New modes
can be created, and the mode can be changed, by means of the following
directives.

(*[ NEWMODE source ]*) creates a new mode called "source", which
contains all the definitions of the current mode so far, but to which
new definitions can be added independently of the current mode.  It
also changes to the new mode.

(*[ MODE 0 ]*) changes the current mode to the original mode, "0".
TYPE_LIST directives, and so on, will all now affect the specified
mode, rather than the previous one; and the specified mode will be
used for typesetting.


One for MNG source:

%(*[ SHOWRULE select.4 ]*)

embeds the command \showrule{\selectXD} in the source at that point.
This is useful for including rules.  I've shown the TeX form of the
directive, but of course the leading % may be omitted.

Be warned, however, that whether it is introduced with % or not, the
remainder of the SHOWRULE line will be commented out in the generated
TeX!


Known bugs
~~~~~~~~~~

* a space is required between \[ and <[, because Keith didn't subtract
  his regular expressions correctly in Hollex.tnormal.  Assistance
  welcomed.


Wish list
~~~~~~~~~

- ability to typeset arbitrary HOL definition etc from files (name it,
  pick it out) (*[ BIND_TO_TEX foobar ]*) followed by the define.

- can we have field names in roman?  (anything preceding := or following . ?)
  (imagine the reader parsing the s's in sendto_4, eg)

- fancy typesetting for context conditions like F_context FC

- allow empty side conditions; don't force T.

- compute binders in set comprehension somehow (see note below).

- look at typeset version of [[ DRESTRICT fds (COMPL {fd}) ]].  The
  parens around [[ (COMPL {fd}) ]] are required for HOL, but if we use
  a symbol like \overline for [[COMPL]], they're not needed for the
  typeset output.  How can we smash them away?

- fix potential_vars so that it picks up all variables in a multi-line
  existential or universal, rather than just the first line.

- allow VAR_PREFIXes to optionally specify replacement TeX, eg

    G  "\Gamma"
    G'  "\Gamma'"
    G'' "\Gamma''"
    G''' "\Gamma'''"


- allow the addition of suffixes, eg 'k'.  (have it check for non-ambiguity?)

   nk "\tsvar{n}_k "
    ek "\tsvar{e}_k "
    xk "\tsvar{x}_k "
    hk "\tsvar{h}_k "

- have some mechanism for general sub/superscripting

- allow symbolic parametric things, eg -->_  for a unary \tran{...}

- have more control over curried functions - at present seems no way
  to set

    col { < labi=ei > as <lab1:T1 ,..,  labn : Tn>  } { M' } { <lab1:T1, ..,labn:Tn> }

  with

   col     "\Mcolour " 3 true

  (from update/Update2/dynamicML.mng).  If you do it as is, the parser
  sees the commas (despite the fact that they are under some kind of
  bracket) and splits the first argument up. If you set the flag to
  'false' and comma-separate the arguments, it doesn't strip off the
  outer braces.   (but, changing the munger to recognise source-level
  bracket correspondence would need us to be able to tell it which
  symbols bracket-match which other eg to cope with <<   <=  >>
  correctly.

- have munging be modal - eg, in the semantics notes, sometimes I'm
  writing general rules etc, in which x,y,z denote metavariables that
  should be typeset italic, and sometimes concrete expressions in
  which x,y,z are object variables that should be set upright.  At
  present I define extra xx,yy, etc for the concrete ones, which is a
  usable workaround.  In this case the modes share almost all of the
  .imn.   Not sure how to invoke - maybe <[* ... ]> <[** ...]> etc?
  (ie, mode names are strings of non-alphanumerics that don't clash
  too badly with brackets...).


- want a way to drop needless brackets, but preserve them if they are
  meaningful.  E.g.,   S_BOOL(req)  (where S_BOOL is a coercion)
  should render as   req  but S_BOOL(req /\ req)   should render as
  (req /\ req).  (here S_BOOL is defined as a curried operator with
  one arg).




 --==[ THE END ]==--

